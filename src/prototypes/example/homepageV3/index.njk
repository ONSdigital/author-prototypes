---
group: Examples
title: Example prototype
layout: example/views/homepageV3
---
{% from "components/button/_macro.njk" import onsButton %}
{% from "components/autosuggest/_macro.njk" import onsAutosuggest %}
{% from "components/table/_macro.njk" import onsTable %}
{% from "components/input/_macro.njk" import onsInput %}
{% from "components/radios/_macro.njk" import onsRadios %}
{% from "components/panel/_macro.njk" import onsPanel %}
{% from "components/list/_macro.njk" import onsList %}
{% from "components/select/_macro.njk" import onsSelect %}
{% from "components/hero/_macro.njk" import onsHero %}
{% from "components/text-indent/_macro.njk" import onsTextIndent %}

{% block head %}
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />


<style>

    #star.material-symbols-outlined, #starIcon.material-symbols-outlined {
    font-variation-settings:
    'FILL' 0,
    'wght' 400,
    'GRAD' 0,
    'opsz' 24
    }

    #star.material-symbols-outlined, #starIcon.material-symbols-outlined {
        position: relative;
        color: #1f84d8;
    }

    #star.material-symbols-outlined::before, #starIcon.material-symbols-outlined::before {
        content: "";
        position: absolute;
        width: 10px; 
        height: 11px;
        background-color: #1f84d8;
        border-radius: 50%; 
        top: 33%; 
        left: 30%;
        z-index: -1;
    }

    .filter-panel{
        width:100%;
        outline: 1px solid #E2E2E3;
    }

    .filter-heading-panel{
        background-color: var(--ons-color-grey-15);
    }

    {# 16px font size #}
    .u-fs-16{
        font-size:16px;
    }

    {# positioning the actions button relative to the row #}
    .row-relative{
        position:relative;
    }

    {# styling the actions button #}
    .menu-container{
        width: fit-content;
        float: right;
    }

    .actionsBtn .ons-icon{
        transform: rotate(90deg);
        }
    
    .actionsBtn{
        display: flex;
        box-sizing: border-box;
        align-items: center;
        justify-content: center;
        background-color: white;
        border: 2px solid #707071;
        border-radius: 3px;
        outline: none;
        padding: 9px 6px;
        font-family: 'Open Sans', sans-serif;
        font-size: 14px;
        font-weight: bold;
        color: #707071;
        line-height: 1.35;
        cursor: pointer;
    }
    
    .actionsBtn:focus{
        background-color: #FBC900;
        border: 2px solid black;
        color: black;
    }
    
    .menu{
        display:none;
        background-color: #206095;
        padding:18px;
        list-style:none;
        width: fit-content;
        border-radius: 3px;
        border: 2px solid #003C57;
        position: absolute;
        top: 55px;
        right:0;
        z-index:1;
    }
    
    .listItemLink{
        color: white;
        margin-left: 20px;
        font-size: 16px;
        padding-bottom: 10px;
        padding-top:10px;
    }
    
    .listItemLink:hover{
        color: white;
        text-decoration: underline solid white 2px;
    }
    
    .duplicate{
        display: inline-flex;
        align-items: center;
        margin-left: 12px;
        color: white;
    }
    
    .listItemButton {
        display: inline-flex;
        box-sizing: border-box;
        width:100%;
        line-height: 1.35;
        align-items: center;
        background-color: #206095;
        color: white;
        border: 2px solid #206095;
        border-radius:3px;
        padding: 10px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, border-color 0.3s, color 0.3s;
    }
    
    .listItemButton .material-symbols-outlined {
        margin-right: 20px;
    }
    
    .listItemButton:hover {
        border: 2px solid white;
    
    }
    
    .listItemButton:focus {
        outline: none;
        background-color: #FBC900;
        border: 3px solid black;
        color: black;
    }

    {# styling the modal #}
    .modal-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); 
        backdrop-filter: blur(3px); 
        display: none; 
        z-index: 100;
    }

    .ons-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 101;
        display:none;
        margin:0;
    }

    .filter-tag-button{
        border-radius: 3px;
        border: 1px solid #bcbcbd;
        background-color: #f5f5f6;
        display:flex;
        justify-content: center;
        align-items: center;
        font-size: 14px;
        padding: 4px 4px 4px 7px;
        margin-left: 18px;

    }

    .filter-tag-button span{
        color: #707071;

    }

    .AllFiltersFlexContainer{
        display:flex;
        flex-wrap: wrap;    
    }

    .FiltersFlexItems{
        display: flex;
        height: fit-content;
        align-items: center;
        font-size: 16px;
        font-weight: 600;
        margin-right: 27px;
        padding-bottom: 18px;

    }

    .filtered-out{
        display:none;
    }

    .ons-table__row:last-child{
        border-bottom: 1px solid #707071;
    }

    .tagAndClearFiltersContainer{
        display: flex;
        justify-content: space-between;
        margin: 9px 0px 27px 0px;
        border-bottom: 1px solid #e2e2e3;
    }

    .clearFilterBtn{
        background-color:white;
        border: 2px solid #6390B5;
        font-size: 16px;
        padding: 3px 6px;
        color:  #206095;
        border-radius: 3px;
    }

    .ons-table__header, .ons-table__cell{
        padding: .5rem 0rem .5rem 2rem;
    }

    .NoOfQuestionnairesAndClearSearch{
        display:flex;
        justify-content: space-between;
    }

    #starred-table tbody tr > td:first-child{
        padding-left:5px;
    }

    #basic-table tbody tr > td:last-child, #starred-table tbody tr > td:last-child{
        padding-right:5px;
    }
    
    .TableMarginBottom{
        margin-bottom: 81px;
    }

    .noSearchResults{
        padding: 18px;
        background-color: #fff0e6;
    }

</style>

{% endblock %}

{% block pageContent %}
{{
    onsHero({
        "title": 'My Questionnaires',
        "text": "Find the questionnaires you can edit or have added from <a href='/prototypes/example/homepageV3/questionnaireDirectory.html'>all questionnaires</a>.",
        "button": {
            "url": '/prototypes/example/homepageV3/create/enterDetails',
            "text": 'Create a questionnaire'
        },
        "wide": "true",
        "variants": ['dark']
    })
}}

<div class="ons-page__container ons-container ons-container--wide">
<div class="ons-grid">
<div class="ons-grid__col ons-col-12@m">
<main id="main-content" class="ons-page__main">

<div class="modal-container" id="modalContainer">
  <dialog class="ons-modal" id="modalDialog" role="dialog">
    <div class="ons-modal__content">
      <div class="ons-modal__body">
        {#<p>It appears you have been inactive for a while.</p>#}

        {% from "components/summary/_macro.njk" import onsSummary %}
        {{
            onsSummary({
                "summaries": [
                    {
                        "summaryTitle": "Are you sure you want to delete this questionniare?",
                        "groups": [
                            {
                                "rows": [
                                    {
                                        "rowItems": [
                                            {
                                                "rowTitle": "Short code",
                                                "id": "shortcode",
                                                "valueList": [
                                                    {
                                                        "text": "Copy of V3 Draft QCAS 0019"                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Title",
                                                "id": "title",
                                                "valueList": [
                                                    {
                                                        "text": "Copy of Quarterly Acquisitions and Disposals of Capital Assets Survey"
                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Project",
                                                "id": "project",
                                                "valueList": [
                                                    {
                                                        "text": "Annual Business Survey (ABS)"
                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Owner",
                                                "id": "owner",
                                                "valueList": [
                                                    {
                                                        "text": "Deborah O'Shaughnessy"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            })
        }}

      </div>
      <div class="ons-u-fr">
        <button type="button" class="ons-btn ons-btn--secondary ons-u-mt-s" onclick="cancelDeletion()">
            <span class="ons-btn__inner"><span class="ons-btn__text">Cancel</span>
            </span>
        </button>
        <button type="submit" class="ons-btn ons-js-modal-btn ons-u-mt-s" id="deleteButton" {#onclick="deleteQuestionnaire(rowId)"#}>
        <span class="ons-btn__inner"><span class="ons-btn__text">Delete</span>
        </span>
        </button>
      </div>
    </div>
  </dialog>
</div>

<div class="modal-container" id="modalContainer2">
  <dialog class="ons-modal" id="modalDialog2" role="dialog">
    <div class="ons-modal__content">
      <div class="ons-modal__body">
        {#<p>It appears you have been inactive for a while.</p>#}

        {% from "components/summary/_macro.njk" import onsSummary %}
        {{
            onsSummary({
                "summaries": [
                    {
                        "summaryTitle": "Are you sure you want to remove this questionnaire from 'My questionnaires'?",
                        "groups": [
                            {
                                "rows": [
                                    {
                                        "rowItems": [
                                            {
                                                "rowTitle": "Short code",
                                                "id": "shortcode",
                                                "valueList": [
                                                    {
                                                        "text": ""                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Title",
                                                "id": "title",
                                                "valueList": [
                                                    {
                                                        "text": ""
                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Project",
                                                "id": "project",
                                                "valueList": [
                                                    {
                                                        "text": ""
                                                    }
                                                ]
                                            },
                                            {
                                                "rowTitle": "Owner",
                                                "id": "owner",
                                                "valueList": [
                                                    {
                                                        "text": ""
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            })
        }}

      </div>
      <div class="ons-u-fr">
        <button type="button" class="ons-btn ons-btn--secondary ons-u-mt-s" onclick="cancelAdd()">
            <span class="ons-btn__inner"><span class="ons-btn__text">Cancel</span>
            </span>
        </button>
        <button type="submit" class="ons-btn ons-js-modal-btn ons-u-mt-s" id="removeButton">
        <span class="ons-btn__inner"><span class="ons-btn__text">Remove</span>
        </span>
        </button>
      </div>
    </div>
  </dialog>
</div>

<div class="ons-grid">
    <div class="ons-grid__col ons-col-12@m">
        {% call onsPanel({
                "title": 'There is a problem with this page',
                "type": 'error',
                "id": "date-error-panel",
                "classes": "ons-u-d-no"
        }) %}
            {{
                onsList({
                    "element": 'ol',
                    "itemsList": [
                        {
                            "text": 'Error message 1',
                            "url": '#created-before-filter',
                            "variants": "inPageLink"
                        },
                        {
                            "text": 'Error message 2',
                            "url": '#created-after-filter',
                            "variants": "inPageLink"
                        }
                    ]
                })
            }}
        {% endcall %}
    </div>

    <div class="ons-grid__col ons-col-3@m">
        <div class="filter-panel">
            <div class="filter-heading-panel ons-u-pl-s ons-u-pr-s ons-u-pt-xs ons-u-pb-xs">
                <h2 class="ons-u-mb-no">Search and filter</h2>
            </div>
            <div class="ons-u-p-s">
                {{
                    onsButton({
                        "type": 'button',
                        "text": 'Apply',
                        "variants": 'small',
                        "classes": "ons-u-mb-m ons-u-mt-xs",
                        "attributes": {
                            "onclick": "ApplyFilters()"
                        }
                    })
                }}

                {{
                    onsInput({
                        "id": "search-field",
                        "label": {
                            "text": "Search by short code or title"
                        },
                        "attributes": {
                            "style": "width:261.5px;"
                        },
                        "classes": "ons-u-mb-m"
                    })
                }}
                <div class="ons-u-mb-m">
                {{ onsAutosuggest({
                    "id": "project-filter",
                    "label": {
                        "text": "Project",
                        "id": "project-filter-label"
                    },
                    "autocomplete": "off",
                    "instructions": "Use up and down keys to navigate suggestions once you\'ve typed more than two characters. Use the enter key to select a suggestion. Touch device users, explore by touch or with swipe gestures.",
                    "ariaYouHaveSelected": "You have selected",
                    "ariaMinChars": "Enter 3 or more characters for suggestions.",
                    "ariaOneResult": "There is one suggestion available.",
                    "ariaNResults": "There are {n} suggestions available.",
                    "ariaLimitedResults": "Results have been limited to 10 suggestions. Type more characters to improve your search",
                    "moreResults": "Continue entering to improve suggestions",
                    "resultsTitle": "Suggestions",
                    "resultsTitleId": "country-of-birth-suggestions",
                    "autosuggestData": "https://gist.githubusercontent.com/LaurenDowling/e5582f6edb222f858ebe5494594ced44/raw/5105bd626cfcc806b78a06a3af2cd13a361ca826/projects.json",
                    "noResults": "No suggestions found",
                    "typeMore": "Continue entering to get suggestions",
                    "attributes": {
                        "style": "width:261.5px;"
                    }
                }) }}
                </div>

                <div class="ons-u-mb-m">

                {{ onsAutosuggest({
                    "id": "owner-filter",
                    "label": {
                    "text": "Owner",
                    "id": "owner-filter-label"
                    },
                    "autocomplete": "off",
                    "instructions": "Use up and down keys to navigate suggestions once you\'ve typed more than two characters. Use the enter key to select a suggestion. Touch device users, explore by touch or with swipe gestures.",
                    "ariaYouHaveSelected": "You have selected",
                    "ariaMinChars": "Enter 3 or more characters for suggestions.",
                    "ariaOneResult": "There is one suggestion available.",
                    "ariaNResults": "There are {n} suggestions available.",
                    "ariaLimitedResults": "Results have been limited to 10 suggestions. Type more characters to improve your search",
                    "moreResults": "Continue entering to improve suggestions",
                    "resultsTitle": "Suggestions",
                    "resultsTitleId": "country-of-birth-suggestions",
                    "autosuggestData": "https://gist.githubusercontent.com/LaurenDowling/86bdd038f632b3f319e28823d93748fe/raw/076fe6327c8de9362fcb1d22ea6f058e5b4404b2/owners.json",
                    "noResults": "No suggestions found",
                    "typeMore": "Continue entering to get suggestions",
                    "attributes": {
                        "style": "width:261.5px;"
                    }
                }) }}

                </div>

                <div class="ons-u-mb-m">

                {{
                    onsDateInput({
                        "id": "created-after-filter",
                        "legendOrLabel": "Created after",
                        "description": "For example, 31 3 1980",
                        "day": {
                            "label": {
                                "text": "Day"
                            },
                            "name": "day"
                        },
                        "month": {
                            "label": {
                                "text": "Month"
                            },
                            "name": "month"
                        },
                        "year": {
                            "label": {
                                "text": "Year"
                            },
                            "name": "year"
                        },
                        "error": {
                            "text": "Error 2"
                        }
                    })
                }}

                </div>

                <div class="ons-u-mb-m">

                {{
                    onsDateInput({
                        "id": "created-before-filter",
                        "legendOrLabel": "Created before",
                        "description": "For example, 31 3 1980",
                        "day": {
                            "label": {
                                "text": "Day"
                            },
                            "name": "day"
                        },
                        "month": {
                            "label": {
                                "text": "Month"
                            },
                            "name": "month"
                        },
                        "year": {
                            "label": {
                                "text": "Year"
                            },
                            "name": "year"
                        },
                        "error": {
                            "text": "Error 1"
                        }
                    })
                }}

                </div>

                {{
                    onsRadios({
                        "legend": "Access",
                        "name": "contact",
                        "classes": "ons-u-mb-s",
                        "borderless": "true",
                        "radios": [
                            {
                                "id": "editor",
                                "label": {
                                    "text": "Editor"
                                },
                                "value": "Editor"
                            },
                            {
                                "id": "view-only",
                                "label": {
                                    "text": "View-only"
                                },
                                "value": "View-only"
                            },
                            {
                                "id": "read-only",
                                "label": {
                                    "text": "Read-only for editors"
                                },
                                "value": "Read-only for editors"
                            }
                        ]
                    })
                }}

            </div>
        </div>
    </div>

    <div class="ons-grid__col ons-col-9@m">
        <div class="ons-u-ml-s">
            <div class="NoOfQuestionnairesAndClearSearch">
                <div>
                    <h2 class="ons-u-fs-m ons-u-mb-m" id="NumberOfQuestionnaires"><span></span><span id="SearchEntry"></span></h2>
                </div>
                <div>
                    <button class="clearFilterBtn" id="clearSearchBtn" style="display:none;" onclick="ClearSearchReApplyFilters()">Clear search</button>
                </div>
            </div>
            <div id="tagsAndBtnContainer">
                <div id="area-for-tags">
                    <div id="tags-project" style="display:none;">Project:</div>
                    <div id="tags-owner" style="display:none;">Owner:</div>
                    <div id="tags-dateBefore" style="display:none;">Created before:</div>
                    <div id="tags-dateAfter" style="display:none;">Created after:</div>
                    <div id="tags-access" style="display:none;">Access:</div>
                </div>
                <div>
                    <button class="clearFilterBtn" id="clearFiltersBtn" style="display:none;" onclick="clearInputValues()">Clear filters</button>
                </div>
            </div>

            <div class="ons-field ons-u-mb-m">
                <label class="ons-label" for="select-example" style="display:inline-block; margin-right:9px; font-size: 16px;">Sort by:</label>
                <select id="select-example" name="select" class="ons-input ons-input--select" onchange="sortTables()" style="width:fit-content; display:inline-block; font-size: 16px;">
                    <option value="" selected>Select an option</option>
                    <option value="created-newest">Created (newest)</option>
                    <option value="created-oldest">Created (oldest)</option>
                </select>
            </div>
            {#
            {{
                onsPanel({
                    "body": "<p>To find view-only questionnaires that have not been added to 'My questionnaires', go to <a href='/prototypes/example/homepageV3/questionnaireDirectory'>all questionnaires</a>.</p>",
                    "id": "view-only-panel",
                    "classes": "ons-u-mb-m",
                    "attributes": {
                        "style": "display:none;"
                    }
                })
            }}
            #}

            <div id="noSearchResultsMessage" class="noSearchResults">
                <h4>Cannot find what you are looking for?</h4>
                <p class="ons-u-mb-m">Try applying different search filters.</p>
                {{-
                    onsTextIndent({
                        text: "<p>To find <strong>view-only</strong> questionnaires that have not been added to 'My questionnaires', go to <a href='/prototypes/example/homepageV3/questionnaireDirectory'>all questionnaires</a></p>"
                    })
                }}
            </div>

            <p class="ons-u-mb-xs" id='StarredReplacement'><span id="starIcon" class="material-symbols-outlined ons-u-mr-xs">star</span><strong>Starred</strong></p>

            <table id="starred-table" class="ons-table TableMarginBottom">
                <caption class="ons-table__caption"><span id="star" class="material-symbols-outlined ons-u-mr-xs">star</span>Starred</caption>
                <thead class="ons-table__head ons-u-d-no">
                    <tr class="ons-table__row">
                    <th scope="col" class="ons-table__header" style="width: 260px;">
                        <span class="ons-table__header-text">Short code and title</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Project</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Owner</span>
                    </th>
                    <th scope="col" class="ons-table__header" style="width: 150px;">
                        <span class="ons-table__header-text">Activity</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Access</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text ons-u-invisible">Actions</span>
                    </th>
                    </tr>
                </thead>
                <tbody class="ons-table__body ons-u-d-no" style="background-color:#e9eff4;">

                </tbody>
            </table>

            <p class="u-fs-16" id='AddedToStarred'>No questionnaires have been moved to starred</p>

            <table id="basic-table" class="ons-table ons-u-mt-l">
                <caption class="ons-table__caption ons-u-vh">Non-starred</caption>
                <thead class="ons-table__head">
                    <tr class="ons-table__row">
                    <th scope="col" class="ons-table__header" style="width: 260px;">
                        <span class="ons-table__header-text">Short code and title</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Project</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Owner</span>
                    </th>
                    <th scope="col" class="ons-table__header" style="width: 150px;">
                        <span class="ons-table__header-text">Activity</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text">Access</span>
                    </th>
                    <th scope="col" class="ons-table__header">
                        <span class="ons-table__header-text ons-u-invisible">Actions</span>
                    </th>
                    </tr>
                </thead>
                <tbody class="ons-table__body">
                    <tr class="ons-table__row row-relative" id="row1">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS Final</span>
                            <a href="#">Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Isabella Ramirez</td>
                        <td class="ons-table__cell" data-date-value="2023-08-30">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            30 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            30 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton1" class="actionsBtn" aria-haspopup="true" aria-controls="menu1" onclick='toggleMenu(event, "menubutton1", "menu1")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu1" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton1", "SMUIS Final", "Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row1")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton1", "menu1", "SMUIS Final", "Social Media Usage and Impact Survey", "Social Media", "Isabella Ramirez", "row1")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row2">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS V4</span>
                            <a href="#">Draft - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Eleanor Prescott</td>
                        <td class="ons-table__cell" data-date-value="2023-08-29">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            29 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            30 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton2" class="actionsBtn" aria-haspopup="true" aria-controls="menu2" onclick='toggleMenu(event, "menubutton2", "menu2")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu2" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton2", "SMUIS V4", "Draft - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row2")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton2", "menu2", "SMUIS V4", "Draft - Social Media Usage and Impact Survey", "Social Media", "Eleanor Prescott", "row2")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row3">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS V3</span>
                            <a href="#">Draft - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Eleanor Prescott</td>
                        <td class="ons-table__cell" data-date-value="2023-08-24">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            24 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            29 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton3" class="actionsBtn" aria-haspopup="true" aria-controls="menu3" onclick='toggleMenu(event, "menubutton3", "menu3")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu3" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton3", "SMUIS V3", "Draft - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row3")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton3", "menu3", "SMUIS V3", "Draft - Social Media Usage and Impact Survey", "Social Media", "Eleanor Prescott", "row3")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row4">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs"></span>
                            <a href="#">Alternative questions for Social Media Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Chris Smith</td>
                        <td class="ons-table__cell" data-date-value="2023-08-25">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            25 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            25 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton4" class="actionsBtn" aria-haspopup="true" aria-controls="menu4" onclick='toggleMenu(event, "menubutton4", "menu4")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu4" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton4", "", "Alternative questions for Social Media Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row4")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton4", "menu4", "", "Alternative questions for Social Media Survey", "", "Chris Smith", "row4")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row5">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">FPS-23 FINAL</span>
                            <a href="#">Financial Planning Survey</a>
                        </td>
                        <td class="ons-table__cell">Financial Planning</td>
                        <td class="ons-table__cell">Javier Fernandez</td>
                        <td class="ons-table__cell" data-date-value="2023-08-05">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            5 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            8 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton5" class="actionsBtn" aria-haspopup="true" aria-controls="menu5" onclick='toggleMenu(event, "menubutton5", "menu5")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu5" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton5", "FPS-23 FINAL", "Financial Planning Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row5")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton5", "menu5", "FPS-23 FINAL", "Financial Planning Survey", "Financial Planning", "Javier Fernandez", "row5")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row6">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">FPS-23 testing version</span>
                            <a href="#">Financial Planning Survey</a>
                        </td>
                        <td class="ons-table__cell">Financial Planning</td>
                        <td class="ons-table__cell">Javier Fernandez</td>
                        <td class="ons-table__cell" data-date-value="2023-08-01">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            1 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            4 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton6" class="actionsBtn" aria-haspopup="true" aria-controls="menu6" onclick='toggleMenu(event, "menubutton6", "menu6")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu6" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton6", "FPS-23 testing version", "Financial Planning Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row6")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton6", "menu6", "FPS-23 testing version", "Financial Planning Survey", "Financial Planning", "Javier Fernandez", "row6")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row7">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS Cognitive Testing Version</span>
                            <a href="#">Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Eleanor Prescott</td>
                        <td class="ons-table__cell" data-date-value="2023-08-24">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            24 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            25 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton7" class="actionsBtn" aria-haspopup="true" aria-controls="menu7" onclick='toggleMenu(event, "menubutton7", "menu7")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu7" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton7", "SMUIS Cognitive Testing Version", "Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row7")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton7", "menu7", "SMUIS Cognitive Testing Version", "Social Media Usage and Impact Survey", "Social Media", "Eleanor Prescott", "row7")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row8">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS Draft test</span>
                            <a href="#">Test 2 - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Lucas Bennett</td>
                        <td class="ons-table__cell" data-date-value="2023-08-10">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            10 Aug 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            21 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton8" class="actionsBtn" aria-haspopup="true" aria-controls="menu8" onclick='toggleMenu(event, "menubutton8", "menu8")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu8" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton8", "SMUIS Draft test", "Test 2 - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row8")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton8", "menu8", "SMUIS Draft test", "Test 2 - Social Media Usage and Impact Survey", "Social Media", "Lucas Bennett", "row8")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row9">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">FPS-23 second draft</span>
                            <a href="#">D2 - Financial Planning Survey</a>
                        </td>
                        <td class="ons-table__cell">Financial Planning</td>
                        <td class="ons-table__cell">Helen Jones</td>
                        <td class="ons-table__cell" data-date-value="2023-06-14">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            14 Jun 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            1 Jul 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton9" class="actionsBtn" aria-haspopup="true" aria-controls="menu9" onclick='toggleMenu(event, "menubutton9", "menu9")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu9" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton9", "FPS-23 second draft", "D2 - Financial Planning Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row9")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton9", "menu9", "FPS-23 second draft", "D2 - Financial Planning Survey", "Financial Planning", "Helen Jones", "row9")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row10">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS V2</span>
                            <a href="#">Draft - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Isabella Ramirez</td>
                        <td class="ons-table__cell" data-date-value="2023-07-26">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            26 Jul 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            25 Aug 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton10" class="actionsBtn" aria-haspopup="true" aria-controls="menu10" onclick='toggleMenu(event, "menubutton10", "menu10")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu10" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton10", "SMUIS V2", "Draft - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row10")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton10", "menu10", "SMUIS V2", "Draft - Social Media Usage and Impact Survey", "Social Media", "Isabella Ramirez", "row10")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row11">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS V1</span>
                            <a href="#">Draft - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Chris Smith</td>
                        <td class="ons-table__cell" data-date-value="2023-07-02">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>
                            2 Jul 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>
                            25 Jul 2023
                        </td>
                        <td class="ons-table__cell">Editor</td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button" id="menubutton11" class="actionsBtn" aria-haspopup="true" aria-controls="menu11" onclick='toggleMenu(event, "menubutton11", "menu11")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu11" role="menu" aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton11", "SMUIS V1", "Draft - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row11")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton11", "menu11", "SMUIS V1", "Draft - Social Media Usage and Impact Survey", "Social Media", "Chris Smith", "row11")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row12">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs"></span>
                            <a href="#">Experimenting with routing logic</a>
                        </td>
                        <td class="ons-table__cell"></td>
                        <td class="ons-table__cell">Chris Smith</td>
                        <td class="ons-table__cell" data-date-value="2023-06-29">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>29 Jun 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>29 Jun 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton12"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu2" onclick='toggleMenu(event, "menubutton12", "menu12")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu12"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton12", "", "Experimenting with routing logic")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row12")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton12", "menu12", "", "Experimenting with routing logic", "", "Chris Smith", "row12")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row13">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">SMUIS Draft</span>
                            <a href="#">Test - Social Media Usage and Impact Survey</a>
                        </td>
                        <td class="ons-table__cell">Social Media</td>
                        <td class="ons-table__cell">Lucas Bennett</td>
                        <td class="ons-table__cell" data-date-value="2023-06-18">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>18 Jun 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>2 Jul 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton13"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu13" onclick='toggleMenu(event, "menubutton13", "menu13")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu13"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton13", "SMUIS Draft", "Test - Social Media Usage and Impact Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row13")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton13", "menu13", "SMUIS Draft", "Test - Social Media Usage and Impact Survey", "Social Media", "Lucas Bennett", "row13")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row14">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">FPS-23 first draft</span>
                            <a href="#">D1 - Financial Planning Survey</a>
                        </td>
                        <td class="ons-table__cell">Financial Planning</td>
                        <td class="ons-table__cell">Helen Jones</td>
                        <td class="ons-table__cell" data-date-value="2023-05-28">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>28 May 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>1 July 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton14"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu14" onclick='toggleMenu(event, "menubutton14", "menu14")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu14"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton14", "FPS-23 first draft", "D1 - Financial Planning Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row14")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton14", "menu14", "FPS-23 first draft", "D1 - Financial Planning Survey", "Financial Planning", "Helen Jones", "row14")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row15">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs"></span>
                            <a href="#">First mockups for Social Media Survey</a>
                        </td>
                        <td class="ons-table__cell"></td>
                        <td class="ons-table__cell">Chris Smith</td>
                        <td class="ons-table__cell" data-date-value="2023-06-21">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>21 Jun 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>8 Jul 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton15"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu15" onclick='toggleMenu(event, "menubutton15", "menu15")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu15"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton15", "", "First mockups for Social Media Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row15")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton15", "menu15", "", "First mockups for Social Media Survey", "", "Chris Smith", "row15")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row16">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Final</span>
                            <a href="#">Teacher Support and Job Satisfaction Survey</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Chris Smith</td>
                        <td class="ons-table__cell" data-date-value="2023-05-01">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>1 May 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>30 May 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton16"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu16" onclick='toggleMenu(event, "menubutton16", "menu16")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu16"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton16", "Final", "Teacher Support and Job Satisfaction Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row16")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton16", "menu16", "Final", "Teacher Support and Job Satisfaction Survey", "Teacher Support and Job Satisfaction Survey", "Chris Smith", "row16")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row17">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Draft V4</span>
                            <a href="#">draft - TSJSS</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Jane Lewis</td>
                        <td class="ons-table__cell" data-date-value="2023-04-17">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>17 Apr 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>5 May 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton17"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu17" onclick='toggleMenu(event, "menubutton17", "menu17")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu17"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton17", "Draft V4", "draft - TSJSS")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row17")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton17", "menu17", "Draft V4", "draft - TSJSS", "Teacher Support and Job Satisfaction Survey", "Jane Lewis", "row17")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row18">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Testing Round 2</span>
                            <a href="#">Teacher Support and Job Satisfaction Survey</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Jane Lewis</td>
                        <td class="ons-table__cell" data-date-value="2023-03-27">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>27 Mar 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>5 May 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton18"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu18" onclick='toggleMenu(event, "menubutton18", "menu18")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu18"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton18", "Testing Round 2", "Teacher Support and Job Satisfaction Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row18")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton18", "menu18", "Testing Round 2", "Teacher Support and Job Satisfaction Survey", "Teacher Support and Job Satisfaction Survey", "Jane Lewis", "row18")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row19">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Draft V3</span>
                            <a href="#">draft - TSJSS</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Lauren Dowling</td>
                        <td class="ons-table__cell" data-date-value="2023-03-08">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>8 Mar 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>5 May 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton19"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu19" onclick='toggleMenu(event, "menubutton19", "menu19")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu19"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton19", "Draft V3", "draft - TSJSS")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row19")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton19", "menu19", "Draft V3", "draft - TSJSS", "Teacher Support and Job Satisfaction Survey", "Lauren Dowling", "row19")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row20">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Testing Round 1</span>
                            <a href="#">Teacher Support and Job Satisfaction Survey</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Isabella Ramirez</td>
                        <td class="ons-table__cell" data-date-value="2023-02-28">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>28 Feb 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>5 May 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton20"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu20" onclick='toggleMenu(event, "menubutton20", "menu20")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu20"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton20", "Testing Round 1", "Teacher Support and Job Satisfaction Survey")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row20")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton20", "menu20", "Testing Round 1", "Teacher Support and Job Satisfaction Survey", "Teacher Support and Job Satisfaction Survey", "Isabella Ramirez", "row20")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row21">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Draft V2</span>
                            <a href="#">draft - TSJSS</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Lauren Dowling</td>
                        <td class="ons-table__cell" data-date-value="2023-02-19">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>19 Feb 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>12 Mar 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton21"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu21" onclick='toggleMenu(event, "menubutton21", "menu21")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu21"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton21", "Draft V2", "draft - TSJSS")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row21")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton21", "menu21", "Draft V2", "draft - TSJSS", "Teacher Support and Job Satisfaction Survey", "Lauren Dowling", "row21")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                    <tr class="ons-table__row row-relative" id="row22">
                        <td class="ons-table__cell">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Draft V1</span>
                            <a href="#">draft - TSJSS</a>
                        </td>
                        <td class="ons-table__cell">Teacher Support and Job Satisfaction Survey</td>
                        <td class="ons-table__cell">Isabella Ramirez</td>
                        <td class="ons-table__cell" data-date-value="2023-02-01">
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>1 Feb 2023
                            <span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>12 Mar 2023
                        </td>
                        <td class="ons-table__cell"> Editor </td>
                        <td class="ons-table__cell">
                            <div class="menu-container">
                                <button type="button"
                                        id="menubutton22"
                                        class="actionsBtn"
                                        aria-haspopup="true"
                                        aria-controls="menu22" onclick='toggleMenu(event, "menubutton22", "menu22")'>
                                    Actions
                                    <svg class="ons-icon ons-u-ml-xs" viewBox="0 0 8 13" xmlns="http://www.w3.org/2000/svg" focusable="false" fill="currentColor"><path d="M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z" transform="translate(-5.02 -1.59)"></path></svg>
                                </button>
                                <ul id="menu22"
                                    role="menu"
                                    aria-labelledby="menubutton" class="menu">
                                    <li role="none" class="duplicate">
                                        <span class="material-symbols-outlined">
                                            content_copy
                                        </span>
                                        <a role="menuitem" class="listItemLink" href="#" onclick='duplicate("menubutton22", "Draft V1", "draft - TSJSS")'>
                                            Duplicate
                                        </a>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton">
                                            <span class="material-symbols-outlined">
                                                link
                                            </span>
                                            Copy link
                                        </button>
                                    </li>
                                    <li role="none">
                                        <button role="menuitem" class="listItemButton" onclick='addToStarred("row22")'>
                                            <span class="material-symbols-outlined">
                                                star
                                            </span>
                                            Move to starred
                                        </button>
                                    </li>
                                    <li role="none" class="ons-u-mb-no">
                                        <button role="menuitem" class="listItemButton" onclick='confirmDeletion("menubutton22", "menu22", "Draft V1", "draft - TSJSS", "Teacher Support and Job Satisfaction Survey", "Isabella Ramirez", "row22")'>
                                            <span class="material-symbols-outlined">
                                                delete
                                            </span>
                                            Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>




                </tbody>
            </table>

            <nav class="ons-content-pagination" aria-label="Guide pagination">
                <ul class="ons-content-pagination__list">
                    <li class="ons-content-pagination__item">
                    <a href="#0" class="ons-content-pagination__link" rel="prev" id="previous" style="display:none;">
                        <span class="ons-content-pagination__link-title">
                        <svg class="ons-icon ons-icon--m" viewBox="0 0 17 13" xmlns="http://www.w3.org/2000/svg" focusable="false"
                            fill="currentColor">
                            <path
                            d="M6.4.2.3 6.4c-.2.2-.2.4 0 .6l6.2 5.8c.2.2.4.1.6 0l.8-.9c.2-.2.1-.4 0-.6l-4-3.7h12.5c.2 0 .4-.2.4-.4V6c0-.2-.2-.4-.4-.4H3.8l4-4c.2-.1.2-.4.1-.5L7 .2c-.1-.1-.4-.1-.6 0z" />
                        </svg>
                        <span class="ons-content-pagination__link-text"> Previous </span>
                        </span>
                        <span class="ons-content-pagination__link-divider ons-u-vh">page in this guide is:</span>
                        <span class="ons-content-pagination__link-label">Overview</span>
                    </a>
                    </li>
                    <li class="ons-content-pagination__item">
                    <a href="#0" class="ons-content-pagination__link" rel="next" id="next" style="display:none;">
                        <span class="ons-content-pagination__link-title">
                        <svg class="ons-icon ons-icon--m" viewBox="0 0 17 13" xmlns="http://www.w3.org/2000/svg" focusable="false"
                            fill="currentColor">
                            <path
                            d="m10 .2-.9.9c-.1.1-.1.4 0 .5l4 4H.6c-.2 0-.4.2-.4.4v1.2c0 .2.2.4.4.4h12.5l-3.9 3.7c-.2.2-.2.4 0 .6l.8.9c.2.2.4.2.6 0L16.8 7c.2-.2.2-.4 0-.6L10.7.3c-.3-.2-.5-.2-.7-.1z" />
                        </svg>
                        <span class="ons-content-pagination__link-text"> Next </span>
                        </span>
                        <span class="ons-content-pagination__link-divider ons-u-vh">page in this guide is:</span>
                        <span class="ons-content-pagination__link-label">2 of 2</span>
                    </a>
                    </li>
                </ul>
            </nav>


        </div>
    </div>

</div>

</main>
</div>
</div>
</div>



{% endblock %}

{% block bodyEnd %}

<script>

{# Rendering new questionnaires #}
        var table = document.getElementById("basic-table");
        var counter = parseInt(sessionStorage.getItem("questionnaireCounter")) || 0;
        var tbody = table.querySelector("tbody");

        for (var i = 1; i <= counter; i++) {
            if(sessionStorage.getItem("Buttonid_" + i)){
            var row = tbody.insertRow(0);
            row.classList.add("ons-table__row", "row-relative");
            var ROWid = sessionStorage.getItem('rowID' + i);
            row.id = ROWid;

            var td1 = row.insertCell(0);
            td1.classList.add("ons-table__cell");
            td1.innerHTML = `<span class="ons-u-db ons-u-fs-s ons-u-mb-xs">${sessionStorage.getItem('Shortcode_' + i)}</span><a href="#">${sessionStorage.getItem('Title_' + i)}</a>`;

            var td2 = row.insertCell(1);
            td2.classList.add("ons-table__cell");
            td2.textContent = sessionStorage.getItem('Project_' + i);

            if(sessionStorage.getItem("Owner_" + i)){
                var td3 = row.insertCell(2);
                td3.classList.add("ons-table__cell");
                td3.textContent = sessionStorage.getItem("Owner_" + i);
            }
            else{
                var td3 = row.insertCell(2);
                td3.classList.add("ons-table__cell");
                td3.textContent = "Sam Lake";
            }

            var td4 = row.insertCell(3);
            td4.classList.add("ons-table__cell");
            td4.setAttribute("data-date-value", "2023-08-30");
            td4.innerHTML = `<span class="ons-u-db ons-u-fs-s ons-u-mb-xs">Date created:</span>30 Aug 2023<span class="ons-u-db ons-u-fs-s ons-u-mb-xs ons-u-mt-xs">Last opened:</span>30 Aug 2023`;

            if(sessionStorage.getItem("Access_" + i) == 'Editor'){
                var td5 = row.insertCell(4);
                td5.classList.add("ons-table__cell");
                td5.textContent = "Editor";
            }

            if(sessionStorage.getItem("Access_" + i) == 'View-only'){
                var td5 = row.insertCell(4);
                td5.classList.add("ons-table__cell");
                td5.textContent = "View-only";
            }

            var td6 = row.insertCell(5);
            td6.classList.add("ons-table__cell");

            var menuContainer = document.createElement("div");
            menuContainer.className = "menu-container";

            var buttonId = sessionStorage.getItem('Buttonid_' + i);
            var ulId = sessionStorage.getItem('ULid' + i);

            var actionsButton = document.createElement("button");
            actionsButton.type = "button";
            actionsButton.id = buttonId;
            actionsButton.className = "actionsBtn";
            actionsButton.setAttribute("aria-haspopup", "true");
            actionsButton.setAttribute("aria-controls", ulId);
            actionsButton.setAttribute("onclick", `toggleMenu(event, '${sessionStorage.getItem('Buttonid_' + i)}', '${sessionStorage.getItem('ULid' + i)}')`);

            var SVGIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            SVGIcon.classList.add("ons-icon", "ons-u-ml-xs");
            SVGIcon.setAttribute("viewBox", "0 0 8 13");
            SVGIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            SVGIcon.setAttribute("focusable", "false");
            SVGIcon.setAttribute("fill", "currentColor");

            var path = document.createElementNS("http://www.w3.org/2000/svg", "path");        
            path.setAttribute("d", "M5.74,14.28l-.57-.56a.5.5,0,0,1,0-.71h0l5-5-5-5a.5.5,0,0,1,0-.71h0l.57-.56a.5.5,0,0,1,.71,0h0l5.93,5.93a.5.5,0,0,1,0,.7L6.45,14.28a.5.5,0,0,1-.71,0Z");
            path.setAttribute("transform", "translate(-5.02 -1.59)");

            SVGIcon.appendChild(path);
            actionsButton.appendChild(document.createTextNode(" Actions"));
            actionsButton.appendChild(SVGIcon);


            var ul = document.createElement("ul");
            ul.id = ulId;
            ul.role = "menu";
            ul.setAttribute("aria-labelledby", buttonId);
            ul.className = "menu";

            var duplicateLi = document.createElement("li");
            duplicateLi.role = "none";
            duplicateLi.className = "duplicate";

            var duplicateSpan = document.createElement("span");
            duplicateSpan.className = "material-symbols-outlined";
            duplicateSpan.textContent = "content_copy";

            var duplicateLink = document.createElement("a");
            duplicateLink.role = "menuitem";
            duplicateLink.className = "listItemLink";
            duplicateLink.href = "#";
            duplicateLink.textContent = "Duplicate";
            duplicateLink.setAttribute("onclick", `duplicate('${buttonId}', '${sessionStorage.getItem('Shortcode_' + i)}', '${sessionStorage.getItem('Title_' + i)}')`);

            duplicateLi.appendChild(duplicateSpan);
            duplicateLi.appendChild(duplicateLink);

            ul.appendChild(duplicateLi);

            var copyLinkLi = document.createElement("li");
            copyLinkLi.role = "none";

            var copyLinkButton = document.createElement("button");
            copyLinkButton.role = "menuitem";
            copyLinkButton.className = "listItemButton";

            var copyLinkSpan = document.createElement("span");
            copyLinkSpan.className = "material-symbols-outlined";
            copyLinkSpan.textContent = "link";

            var buttonText = document.createTextNode("Copy link");
            
            copyLinkButton.appendChild(copyLinkSpan);
            copyLinkButton.appendChild(buttonText);


            copyLinkLi.appendChild(copyLinkButton);
            ul.appendChild(copyLinkLi);


    {# Move to starred button #}
            var addToStarredLi = document.createElement("li");
            addToStarredLi.role = "none";

            var addToStarredButton = document.createElement("button");
            addToStarredButton.role = "menuitem";
            addToStarredButton.className = "listItemButton";
            addToStarredButton.setAttribute("onclick", `addToStarred('${sessionStorage.getItem('rowID' + i)}')`);


            var addToStarredSpan = document.createElement("span");
            addToStarredSpan.className = "material-symbols-outlined";
            addToStarredSpan.textContent = "star";

            var StarText = document.createTextNode("Move to starred");

            addToStarredButton.appendChild(addToStarredSpan);
            addToStarredButton.appendChild(StarText);

            addToStarredLi.appendChild(addToStarredButton);
            ul.appendChild(addToStarredLi);

    {# Remove from My questionnaires #}
            
            if(sessionStorage.getItem("Access_" + i) == 'View-only'){
                var removeFromMyQuestionnairesLi = document.createElement("li");
                removeFromMyQuestionnairesLi.role = "none";

                var removeFromMyQuestionnairesButton = document.createElement("button");
                removeFromMyQuestionnairesButton.role = "menuitem";
                removeFromMyQuestionnairesButton.className = "listItemButton";
                removeFromMyQuestionnairesButton.id = sessionStorage.getItem("AddToBtnID_" + i);


                var removeFromMyQuestionnairesSpan = document.createElement("span");
                removeFromMyQuestionnairesSpan.className = "material-symbols-outlined";
                removeFromMyQuestionnairesSpan.textContent = "bookmark_remove";

                var RemoveText = document.createTextNode("Remove from My questionnaires");

                removeFromMyQuestionnairesButton.appendChild(removeFromMyQuestionnairesSpan);
                removeFromMyQuestionnairesButton.appendChild(RemoveText);

                removeFromMyQuestionnairesLi.appendChild(removeFromMyQuestionnairesButton);
                ul.appendChild(removeFromMyQuestionnairesLi);

                removeFromMyQuestionnairesButton.setAttribute("onclick", `addToMyQuestionnaires('${sessionStorage.getItem('rowID' + i)}','${sessionStorage.getItem('Buttonid_' + i)}', '${sessionStorage.getItem('ULid' + i)}', '${sessionStorage.getItem('Shortcode_' + i)}', '${sessionStorage.getItem('Title_' + i)}', '${sessionStorage.getItem('Project_' + i)}', '${sessionStorage.getItem('Owner_' + i)}', '${sessionStorage.getItem('DateCreated_' + i)}', '${sessionStorage.getItem('DateLastOpened_' + i)}', '${sessionStorage.getItem('Access_' + i)}', '${sessionStorage.getItem('AddToBtnID_' + i)}')`);

            }

    {# Delete button #}
            if(sessionStorage.getItem("Access_" + i) != 'View-only'){

                var deleteLi = document.createElement("li");
                deleteLi.role = "none";
                deleteLi.className = "ons-u-mb-no";

                var deleteButton = document.createElement("button");
                deleteButton.role = "menuitem";
                deleteButton.className = "listItemButton";
                deleteButton.setAttribute("onclick", `confirmDeletion('${sessionStorage.getItem('Buttonid_' + i)}', '${sessionStorage.getItem('ULid' + i)}', '${sessionStorage.getItem('Shortcode_' + i)}', '${sessionStorage.getItem('Title_' + i)}', '${sessionStorage.getItem('Project_' + i)}', '${sessionStorage.getItem('Owner_' + i)}', '${sessionStorage.getItem('rowID' + i)}')`);

                var deleteSpan = document.createElement("span");
                deleteSpan.className = "material-symbols-outlined";
                deleteSpan.textContent = "delete";

                var DeleteText = document.createTextNode("Delete");

                deleteButton.appendChild(deleteSpan);
                deleteButton.appendChild(DeleteText);

                deleteLi.appendChild(deleteButton);
                ul.appendChild(deleteLi);
            }

                menuContainer.appendChild(actionsButton);
                menuContainer.appendChild(ul);
                td6.appendChild(menuContainer);

        }
    }

// Initialize a variable to keep track of the currently open menu
var currentOpenMenu = null;

function toggleMenu(event, Buttonid, ULid) {
    event.stopPropagation();
    var menu = document.getElementById(ULid);
    var svgIcon = document.querySelector(`#${Buttonid} .ons-icon`);

    if (menu.style.display === "none" || menu.style.display === "") {
        // Close the currently open menu, if any
        if (currentOpenMenu !== null) {
            currentOpenMenu.style.display = "none";
            // Update the icon of the previously open button
            var prevButtonId = currentOpenMenu.getAttribute("data-button-id");
            var prevSvgIcon = document.querySelector(`#${prevButtonId} .ons-icon`);
            prevSvgIcon.style.transform = "rotate(90deg)";
            prevSvgIcon.style.padding = "0 0 0 0";
        }

        // Set the current open menu and associated button ID
        currentOpenMenu = menu;
        currentOpenMenu.setAttribute("data-button-id", Buttonid);

        menu.style.display = "block";
        svgIcon.style.transform = "rotate(-90deg)";
        svgIcon.style.padding = "0 0 0 4px";

        // Add a click event listener to the button to prevent propagation
        var button = document.getElementById(Buttonid);
        button.addEventListener("click", function (e) {
            e.stopPropagation();
        });

        // Add a click event listener to close the menu when clicking outside
        var closeMenu = function (e) {
            if (!menu.contains(e.target) && e.target.id !== Buttonid) {
                menu.style.display = "none";
                svgIcon.style.transform = "rotate(90deg)";
                svgIcon.style.padding = "0 0 0 0";
                document.removeEventListener("click", closeMenu);
                currentOpenMenu = null; // Reset the current open menu
            }
        };
        document.addEventListener("click", closeMenu);
    } else {
        // Close the menu
        menu.style.display = "none";
        svgIcon.style.transform = "rotate(90deg)";
        svgIcon.style.padding = "0 0 0 0";
        document.removeEventListener("click", closeMenu);
        currentOpenMenu = null; // Reset the current open menu
    }
}



function confirmDeletion(Buttonid, ULid, shortcode, title, project, owner, rowId){
        console.log('confirm deletion');
        toggleMenu(event, Buttonid, ULid);
        var container = document.getElementById('modalContainer');
        container.style.display = "block";
        var modal = document.getElementById('modalDialog');
        modal.style.display = "block";

        {# Updates the values in the modal #}
        var shortcodeSpan = document.querySelector('#shortcode .ons-summary__text');
        shortcodeSpan.textContent = shortcode;
        var titleSpan = document.querySelector('#title .ons-summary__text');
        titleSpan.textContent = title;
        var projectSpan = document.querySelector('#project .ons-summary__text');
        if (project != 'null'){
            console.log(project);
            projectSpan.textContent = project;
        }
        else{
            projectSpan.textContent = '';

        }
        var ownerSpan = document.querySelector('#owner .ons-summary__text');
        ownerSpan.textContent = owner;
        console.log('owner is:' + owner);
        
        

        var deleteButton = document.getElementById('deleteButton');
        deleteButton.addEventListener('click', function() {

        var match = Buttonid.match(/_(\d+)$/);
        if (match) {
            var numberAfterUnderscore = match[1];

            sessionStorage.removeItem("Buttonid_" + numberAfterUnderscore);
            sessionStorage.removeItem("ULid" + numberAfterUnderscore);
            if(sessionStorage.getItem("Shortcode_" + numberAfterUnderscore)){
                sessionStorage.removeItem("Shortcode_" + numberAfterUnderscore);
            }
            sessionStorage.removeItem("Title_" + numberAfterUnderscore);
            if(sessionStorage.getItem("Project_" + numberAfterUnderscore)){
                sessionStorage.removeItem("Project_" + numberAfterUnderscore);
            }
            sessionStorage.removeItem("rowID" + numberAfterUnderscore);

            {#deleteQuestionnaire(Buttonid, ULid, shortcode, title, project, owner, rowId);#}

        }
        deleteQuestionnaire(rowId);


        });
            
}

function cancelDeletion(){
    console.log('hello');
    var container = document.getElementById('modalContainer');
    container.style.display = "none";
    var modal = document.getElementById('modalDialog');
    modal.style.display = "none";
}


{# Updating number of questionnaires #}
    var StarredTable = document.getElementById('starred-table');
    var BasicTable = document.getElementById('basic-table');

    // Count the rows in each table
    var StarredRowCount = StarredTable.rows.length;
    var BasicRowCount = BasicTable.rows.length;

    // Calculate the total number of rows
    var TotalRowCount = StarredRowCount + BasicRowCount - 2;

    // Update the text content of the element with id="NumberOfQuestionnaires"
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    numberOfQuestionnairesElement.textContent = TotalRowCount + ' questionnaires';


{# Delete questionnaire #}
    function deleteQuestionnaire(rowId) {
        console.log(rowId);
        console.log('deleting row');
        var row = document.getElementById(rowId);
        console.log(document.getElementById(rowId));
            if (row) {
                row.remove();
                var container = document.getElementById('modalContainer');
                container.style.display = "none";
                var modal = document.getElementById('modalDialog');
                modal.style.display = "none";

                {#var questionnaireCountElement = document.getElementById('questionnaireCount');
                var currentCount = parseInt(questionnaireCountElement.textContent, 10);
                if (!isNaN(currentCount) && currentCount > 0) {
                questionnaireCountElement.textContent = (currentCount - 1) + ' questionnaires';
                }
                #}


            }
        updateQuestionnaireCounter();
        updatePagination();

    }


{# Duplicate questionnaire #}
    function duplicate(Buttonid, shortcode, title) {
        var button = document.getElementById(Buttonid);
        button.style.border = "2px solid #003C57";
        button.style.backgroundColor = "#206095";
        button.style.color = "white"; 

        if (shortcode) {
            sessionStorage.setItem('duplicateShortcode', shortcode);
        }
        if (title) {
            sessionStorage.setItem('duplicateTitle', title);
        }

        window.location.href = "/prototypes/example/homepageV3/duplicate/enterDetails";
    }


{# Starring questionnaire #}

    function addToStarred(rowID) {
            var rowToMove = document.getElementById(rowID);
            var starredTable = document.getElementById("starred-table");
            var NonstarredTable = document.getElementById("basic-table");

            buttons = rowToMove.querySelectorAll("button");

            for (var j = 0; j < buttons.length; j++) {
                var button = buttons[j];
                if (button.textContent.includes("Move to starred")) {
                    rowToMove.parentNode.removeChild(rowToMove);
                    starredTable.querySelector("tbody").insertBefore(rowToMove, starredTable.querySelector("tbody").firstChild);
                    button.innerHTML = "<span class='material-symbols-outlined'>star</span>Remove from starred";
                }
                else if (button.textContent.includes("Remove from starred")){
                    rowToMove.parentNode.removeChild(rowToMove);
                    NonstarredTable.querySelector("tbody").insertBefore(rowToMove, NonstarredTable.querySelector("tbody").firstChild);
                    button.innerHTML = "<span class='material-symbols-outlined'>star</span>Move to starred";
                }
            }

            var tbody = starredTable.querySelector("tbody");
            var rowCount = tbody.getElementsByTagName("tr").length;
            console.log('New row count is: ' + rowCount);
            if (rowCount === 0){
                console.log('hiding');
                document.getElementById('AddedToStarred').style.display = "block";
                document.getElementById('StarredReplacement').style.display = "block";
                var thead = starredTable.querySelector("thead");
                var tbody = starredTable.querySelector("tbody");
                thead.classList.add("ons-u-d-no");
                tbody.classList.add("ons-u-d-no");

            }
            else{
                console.log('displaying');
                document.getElementById('AddedToStarred').style.display = "none";
                document.getElementById('StarredReplacement').style.display = "none";
                var thead = starredTable.querySelector("thead");
                var tbody = starredTable.querySelector("tbody");
                thead.classList.remove("ons-u-d-no");
                tbody.classList.remove("ons-u-d-no");
            }

            currentPage = 1; // Reset currentPage to 1
            updatePagination();
            sortTables();

    }


{# Adding and removing view-only questionnaires #}

    var buttons = document.querySelectorAll('button');

    for (var i = 0; i < buttons.length; i++) {
        var button = buttons[i];
        if (button.textContent.includes("Add to My questionnaires")) {
            var buttonId = button.id;
            if(sessionStorage.getItem(buttonId)){
                button.innerHTML = "<span class='material-symbols-outlined'>bookmark_remove</span>Remove from My questionnaires";

            }
        }
    }

    function addToMyQuestionnaires(rowId, Buttonid, ULid, shortcode, title, project, owner, dateCreated, dateLastOpened, access, addToBtnID) {

        var button = document.getElementById(addToBtnID);
        if (button.textContent.includes("Add to My questionnaires")) {
            button.innerHTML = "<span class='material-symbols-outlined'>bookmark_remove</span>Remove from My questionnaires";

            var counter = parseInt(sessionStorage.getItem('questionnaireCounter')) || 0;
            counter++;
            sessionStorage.setItem('questionnaireCounter', counter);
            sessionStorage.setItem('questionnaireCounter' + addToBtnID, counter);

            sessionStorage.setItem('rowID' + counter, rowId);
            sessionStorage.setItem('Buttonid_' + counter, Buttonid);
            sessionStorage.setItem('ULid' + counter, ULid);
            sessionStorage.setItem('Shortcode_' + counter, shortcode);
            sessionStorage.setItem('Title_' + counter, title);
            sessionStorage.setItem('Project_' + counter, project);
            sessionStorage.setItem('Owner_' + counter, owner);
            sessionStorage.setItem('DateCreated_' + counter, dateCreated);
            sessionStorage.setItem('DateLastOpened_' + counter, dateLastOpened);
            sessionStorage.setItem('Access_' + counter, access);
            sessionStorage.setItem('AddToBtnID_' + counter, addToBtnID);

        } 
        else {
        button.innerHTML = "<span class='material-symbols-outlined'>bookmark_add</span>Add to My questionnaires";
        var counterAtTimeOfAdd = sessionStorage.getItem('questionnaireCounter' + addToBtnID);

        toggleMenu(event, Buttonid, ULid);
        var container2 = document.getElementById('modalContainer2');
        container2.style.display = "block";
        var modal2 = document.getElementById('modalDialog2');
        modal2.style.display = "block";

        {# Updates the values in the modal #}
        var shortcodeSpan = document.querySelector('#modalDialog2 #shortcode .ons-summary__text');
        shortcodeSpan.textContent = shortcode;
        console.log(shortcode);
        var titleSpan = document.querySelector('#modalDialog2 #title .ons-summary__text');
        titleSpan.textContent = title;
        var projectSpan = document.querySelector('#modalDialog2 #project .ons-summary__text');
        if (project != 'null'){
            console.log(project);
            projectSpan.textContent = project;
        }
        else{
            projectSpan.textContent = '';

        }
        var ownerSpan = document.querySelector('#modalDialog2 #owner .ons-summary__text');
        ownerSpan.textContent = owner;    
        

        var removeFromMyQuestionnaires = document.getElementById('removeButton');
        removeFromMyQuestionnaires.addEventListener('click', function() {

            sessionStorage.removeItem('rowID' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Buttonid_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('ULid' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Shortcode_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Title_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Project_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Owner_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('DateCreated_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('DateLastOpened_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('Access_' + counterAtTimeOfAdd);
            sessionStorage.removeItem('AddToBtnID_' + counterAtTimeOfAdd);

            var closeModal = document.getElementById('modalDialog2');
            var closeBackground = document.getElementById('modalContainer2');

            closeModal.style.display = 'none';
            closeBackground.style.display = 'none';


            deleteQuestionnaire(rowId);


        });
            


        }

    }

    function cancelAdd(){
        console.log('hello');
        var container = document.getElementById('modalContainer2');
        container.style.display = "none";
        var modal = document.getElementById('modalDialog2');
        modal.style.display = "none";
    }


{# Hiding the error messages and panel onload #}

    var errorPanel = document.getElementById("date-error-panel");
    {#errorPanel.style.display = "none";#}
    var fieldset = document.getElementById("created-before-filter");
    var parentDiv = fieldset.closest(".ons-panel--error"); // Find the parent div with class ons-panel--error
    var panelBodyDiv = fieldset.closest(".ons-panel__body");

    if (parentDiv) {
        // Add classes to the found parent div
        parentDiv.classList.remove('ons-panel', 'ons-panel--error', 'ons-panel--no-title');
        panelBodyDiv.classList.remove('ons-panel__body');

        // Update the display style of the p element within the parent div
        var errorP = parentDiv.querySelector('p');
        if (errorP) {
            errorP.style.display = 'none';
        }

        document.getElementById('created-before-filter-day').classList.remove('ons-input--error');
        document.getElementById('created-before-filter-month').classList.remove('ons-input--error')
        document.getElementById('created-before-filter-year').classList.remove('ons-input--error')

    }

    var Afterfieldset = document.getElementById("created-after-filter");
    var AfterparentDiv = Afterfieldset.closest(".ons-panel--error"); // Find the parent div with class ons-panel--error
    var AfterpanelBodyDiv = Afterfieldset.closest(".ons-panel__body");

    if (AfterparentDiv) {
        // Add classes to the found parent div
        AfterparentDiv.classList.remove('ons-panel', 'ons-panel--error', 'ons-panel--no-title');
        AfterpanelBodyDiv.classList.remove('ons-panel__body');

        // Update the display style of the p element within the parent div
        var AftererrorP = AfterparentDiv.querySelector('p');
        if (AftererrorP) {
            AftererrorP.style.display = 'none';
        }

        document.getElementById('created-after-filter-day').classList.remove('ons-input--error');
        document.getElementById('created-after-filter-month').classList.remove('ons-input--error')
        document.getElementById('created-after-filter-year').classList.remove('ons-input--error')

    }


function ApplyFilters() {
    currentPage = 1; // Reset currentPage to 1
    var searchFieldCapitals = document.getElementById("search-field").value.trim();
    var projectFilterCapitals = document.getElementById("project-filter").value;
    var ownerFilterCapitals = document.getElementById("owner-filter").value;
    var searchField = document.getElementById("search-field").value.trim().toLowerCase();
    var projectFilter = document.getElementById("project-filter").value.toLowerCase();
    var ownerFilter = document.getElementById("owner-filter").value.toLowerCase();
    var BeforeDayFilter = document.getElementById("created-before-filter-day").value;
    var BeforeMonthFilter = document.getElementById("created-before-filter-month").value;
    var BeforeYearFilter = document.getElementById("created-before-filter-year").value;
    var AfterDayFilter = document.getElementById("created-after-filter-day").value;
    var AfterMonthFilter = document.getElementById("created-after-filter-month").value;
    var AfterYearFilter = document.getElementById("created-after-filter-year").value;
    var EditorAccess = document.getElementById("editor");
    var ViewOnlyAccess = document.getElementById("view-only");
    var ReadOnlyAccess = document.getElementById("read-only");
    var starredTable = document.getElementById("starred-table");
    var basicTable = document.getElementById("basic-table");

    var errorsForDateBefore = false;
    var errorsForDateAfter = false;

    // Regular expressions to check for numeric values
    const numericRegex = /^\d+$/;

    // Check if at least one of the date filters is not empty
    var isAnyDateFilterNotEmpty =
        BeforeDayFilter.trim() !== "" ||
        BeforeMonthFilter.trim() !== "" ||
        BeforeYearFilter.trim() !== "";

    // Check if all three "Before" date fields are not empty when one of them is not empty
    if (isAnyDateFilterNotEmpty && (BeforeDayFilter.trim() === "" || BeforeMonthFilter.trim() === "" || BeforeYearFilter.trim() === "")) {
        errorsForDateBefore = true;
        console.log('... if');
        // One or more date fields are not empty, but not all of them, add error classes and update error message

        // Add classes to parent div and its parent
        var fieldset = document.getElementById("created-before-filter");
        var parentDiv = document.querySelector('fieldset#created-before-filter').closest('div');
        var grandParentDiv = parentDiv.closest('div');

        // Add classes to the found parent div
        parentDiv.classList.add('ons-panel__body');
        grandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

        // Update the display style of the p element within the parent div
        var errorP = parentDiv.querySelector('p');
        if (errorP) {
            errorP.style.display = 'block';

            // Update the text content of the <strong> tag within the p element
            var strongTag = errorP.querySelector('strong');
            if (strongTag) {
                strongTag.textContent = 'Enter the day, month and year that the questionnaire was created';
            }
        }

        var errorPanel = document.getElementById("date-error-panel");
        errorPanel.style.display = "block";
        var firstListItem = document.querySelector("#date-error-panel li a");
        firstListItem.textContent = 'Enter the day, month and year that the questionnaire after was created';


        if (BeforeDayFilter.trim() === "") {
            document.getElementById("created-before-filter-day").classList.add('ons-input--error');
        } else {
            document.getElementById("created-before-filter-day").classList.remove('ons-input--error');
        }
        if (BeforeMonthFilter.trim() === "") {
            document.getElementById("created-before-filter-month").classList.add('ons-input--error');
        } else {
            document.getElementById("created-before-filter-month").classList.remove('ons-input--error');
        }
        if (BeforeYearFilter.trim() === "") {
            document.getElementById("created-before-filter-year").classList.add('ons-input--error');
        } else {
            document.getElementById("created-before-filter-year").classList.remove('ons-input--error');
        }
    }

    // Check if the Before filters are non-empty and match
    else if (BeforeDayFilter !== "" && BeforeMonthFilter !== "" && BeforeYearFilter !== "") {
        console.log('else if');
        // Check for numeric values
        if (!numericRegex.test(BeforeDayFilter) || !numericRegex.test(BeforeMonthFilter) || !numericRegex.test(BeforeYearFilter)) {
            errorsForDateBefore = true;
            console.log('Date before not a number');
            // Add classes to parent div and its parent
            var Fieldset = document.getElementById("created-before-filter");
            var parentDiv = document.querySelector('fieldset#created-before-filter').closest('div');
            console.log(parentDiv);
            var grandParentDiv = parentDiv.parentNode;
            console.log(grandParentDiv);

            // Add classes to the found parent div
            parentDiv.classList.add('ons-panel__body');
            grandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

            // Update the display style of the p element within the parent div
            var errorP = parentDiv.querySelector('p');
            if (errorP) {
                errorP.style.display = 'block';

                // Update the text content of the <strong> tag within the p element
                var strongTag = errorP.querySelector('strong');
                if (strongTag) {
                    strongTag.textContent = 'Enter a number';
                }
            }

            var errorPanel = document.getElementById("date-error-panel");
            errorPanel.style.display = "block";
            var firstListItem = document.querySelector("#date-error-panel li a");
            firstListItem.textContent = 'Enter a number';

            
            if (!numericRegex.test(BeforeDayFilter)) {
                document.getElementById("created-before-filter-day").classList.add('ons-input--error');
            } else {
                document.getElementById("created-before-filter-day").classList.remove('ons-input--error');
            }
            if (!numericRegex.test(BeforeMonthFilter)) {
                document.getElementById("created-before-filter-month").classList.add('ons-input--error');
            } else {
                document.getElementById("created-before-filter-month").classList.remove('ons-input--error');
            }
            if (!numericRegex.test(BeforeYearFilter)) {
                document.getElementById("created-before-filter-year").classList.add('ons-input--error');
            } else {
                document.getElementById("created-before-filter-year").classList.remove('ons-input--error');
            }
            
            errorsForDateBefore = true;

        }

        // Check for valid ranges for day and month
        else if (
            parseInt(BeforeDayFilter) < 1 || parseInt(BeforeDayFilter) > 31 ||
            parseInt(BeforeMonthFilter) < 1 || parseInt(BeforeMonthFilter) > 12
        ) {
            errorsForDateBefore = true;
            console.log('this is executing too');

            // Add classes to parent div and its parent
            var fieldset = document.getElementById("created-before-filter");
            var parentDiv = document.querySelector('fieldset#created-before-filter').closest('div');
            var grandParentDiv = parentDiv.closest('div');

            // Add classes to the found parent div
            parentDiv.classList.add('ons-panel__body');
            grandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

            // Update the display style of the p element within the parent div
            var errorP = parentDiv.querySelector('p');
            if (errorP) {
                errorP.style.display = 'block';

                // Update the text content of the <strong> tag within the p element
                var strongTag = errorP.querySelector('strong');
                if (strongTag) {
                    strongTag.textContent = 'Enter a valid date';
                }
            }

            // Invalid day or month, update error message and add error classes
            if (parseInt(BeforeDayFilter) < 1 || parseInt(BeforeDayFilter) > 31) {
                document.getElementById("created-before-filter-day").classList.add('ons-input--error');
            } else {
                document.getElementById("created-before-filter-day").classList.remove('ons-input--error');
            }
            if (parseInt(BeforeMonthFilter) < 1 || parseInt(BeforeMonthFilter) > 12) {
                document.getElementById("created-before-filter-month").classList.add('ons-input--error');
            } else {
                document.getElementById("created-before-filter-month").classList.remove('ons-input--error');
            }
            document.getElementById("created-before-filter-year").classList.remove('ons-input--error');
            
            var errorPanel = document.getElementById("date-error-panel");
            errorPanel.style.display = "block";
            var firstListItem = document.querySelector("#date-error-panel li a");
            firstListItem.textContent = 'Enter a valid date';
            
            errorsForDateBefore = true;

        }

        else{

            console.log('else');
            var fieldset = document.getElementById("created-before-filter");
            var parentDiv = fieldset.closest(".ons-panel--error"); // Find the parent div with class ons-panel--error
            var panelBodyDiv = fieldset.closest(".ons-panel__body");

            if (parentDiv) {
                // Add classes to the found parent div
                parentDiv.classList.remove('ons-panel', 'ons-panel--error', 'ons-panel--no-title');
                panelBodyDiv.classList.remove('ons-panel__body');

                // Update the display style of the p element within the parent div
                var errorP = parentDiv.querySelector('p');
                if (errorP) {
                    errorP.style.display = 'none';
                }

                document.getElementById('created-before-filter-day').classList.remove('ons-input--error');
                document.getElementById('created-before-filter-month').classList.remove('ons-input--error')
                document.getElementById('created-before-filter-year').classList.remove('ons-input--error')

            }
        }
    }

    // Check if at least one of the date filters is not empty
    var isAnyAfterDateFilterNotEmpty =
        AfterDayFilter.trim() !== "" ||
        AfterMonthFilter.trim() !== "" ||
        AfterYearFilter.trim() !== "";

    // Check if all three "After" date fields are not empty when one of them is not empty
    if (isAnyAfterDateFilterNotEmpty && (AfterDayFilter.trim() === "" || AfterMonthFilter.trim() === "" || AfterYearFilter.trim() === "")) {
        console.log('... if');
        // One or more date fields are not empty, but not all of them, add error classes and update error message

        // Add classes to parent div and its parent
        var Afterfieldset = document.getElementById("created-after-filter");
        var AfterparentDiv = document.querySelector('fieldset#created-after-filter').closest('div');
        var AftergrandParentDiv = AfterparentDiv.closest('div');

        // Add classes to the found parent div
        AfterparentDiv.classList.add('ons-panel__body');
        AftergrandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

        // Update the display style of the p element within the parent div
        var AftererrorP = AfterparentDiv.querySelector('p');
        if (AftererrorP) {
            AftererrorP.style.display = 'block';

            // Update the text content of the <strong> tag within the p element
            var AfterstrongTag = AftererrorP.querySelector('strong');
            if (AfterstrongTag) {
                AfterstrongTag.textContent = 'Enter the day, month and year that the questionnaire was created';
            }
        }

        var errorPanel = document.getElementById("date-error-panel");
        errorPanel.style.display = "block";
        var firstListItem = document.querySelector("#date-error-panel li a");
        if(errorsForDateBefore == true){
            var secondChildLi = document.querySelector('#date-error-panel li:nth-child(2)');
            var secondLink = secondChildLi.querySelector('a');
            secondLink.textContent = 'Enter the day, month and year that the questionnaire after was created';
            console.log('first already taken');
        }
        else{
            errorPanel.style.display = "block";
            var firstListItem = document.querySelector("#date-error-panel li a");
            firstListItem.textContent = 'Enter the day, month and year that the questionnaire after was created';
            console.log('first not taken');

        }

        if (AfterDayFilter.trim() === "") {
            document.getElementById("created-after-filter-day").classList.add('ons-input--error');
        } else {
            document.getElementById("created-after-filter-day").classList.remove('ons-input--error');
        }
        if (AfterMonthFilter.trim() === "") {
            document.getElementById("created-after-filter-month").classList.add('ons-input--error');
        } else {
            document.getElementById("created-after-filter-month").classList.remove('ons-input--error');
        }
        if (AfterYearFilter.trim() === "") {
            document.getElementById("created-after-filter-year").classList.add('ons-input--error');
        } else {
            document.getElementById("created-after-filter-year").classList.remove('ons-input--error');
        }
        errorsForDateAfter = true; 
    }

    // Check if the After filters are non-empty and match
    else if (AfterDayFilter !== "" && AfterMonthFilter !== "" && AfterYearFilter !== "") {
        console.log('else if');
        // Check for numeric values
        if (!numericRegex.test(AfterDayFilter) || !numericRegex.test(AfterMonthFilter) || !numericRegex.test(AfterYearFilter)) {

            // Add classes to parent div and its parent
            var Afterfieldset = document.getElementById("created-after-filter");
            var AfterparentDiv = document.querySelector('fieldset#created-after-filter').closest('div');
            var AftergrandParentDiv = AfterparentDiv.closest('div');

            // Add classes to the found parent div
            AfterparentDiv.classList.add('ons-panel__body');
            AftergrandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

            // Update the display style of the p element within the parent div
            var AftererrorP = AfterparentDiv.querySelector('p');
            if (AftererrorP) {
                AftererrorP.style.display = 'block';

                // Update the text content of the <strong> tag within the p element
                var AfterstrongTag = AftererrorP.querySelector('strong');
                if (AfterstrongTag) {
                    AfterstrongTag.textContent = 'Enter a number';
                }
            }

            var errorPanel = document.getElementById("date-error-panel");
            errorPanel.style.display = "block";
            var firstListItem = document.querySelector("#date-error-panel li a");
            if(errorsForDateBefore == true){
                var secondChildLi = document.querySelector('#date-error-panel li:nth-child(2)');
                var secondLink = secondChildLi.querySelector('a');
                console.log('Second: not a number');
                secondLink.textContent = 'Enter a number';
            }
            else{
                errorPanel.style.display = "block";
                var firstListItem = document.querySelector("#date-error-panel li a");
                firstListItem.textContent = 'Enter a number';

            }
            
            if (!numericRegex.test(AfterDayFilter)) {
                document.getElementById("created-after-filter-day").classList.add('ons-input--error');
            } else {
                document.getElementById("created-after-filter-day").classList.remove('ons-input--error');
            }
            if (!numericRegex.test(AfterMonthFilter)) {
                document.getElementById("created-after-filter-month").classList.add('ons-input--error');
            } else {
                document.getElementById("created-after-filter-month").classList.remove('ons-input--error');
            }
            if (!numericRegex.test(AfterYearFilter)) {
                document.getElementById("created-after-filter-year").classList.add('ons-input--error');
            } else {
                document.getElementById("created-after-filter-year").classList.remove('ons-input--error');
            }
            errorsForDateAfter = true; 
        }

        // Check for valid ranges for day and month
        else if (
            parseInt(AfterDayFilter) < 1 || parseInt(AfterDayFilter) > 31 ||
            parseInt(AfterMonthFilter) < 1 || parseInt(AfterMonthFilter) > 12
        ) {
            console.log('second got an input that is invalid');

            // Add classes to parent div and its parent
            var Afterfieldset = document.getElementById("created-after-filter");
            var AfterparentDiv = document.querySelector('fieldset#created-after-filter').closest('div');
            var AftergrandParentDiv = AfterparentDiv.closest('div');

            // Add classes to the found parent div
            AfterparentDiv.classList.add('ons-panel__body');
            AftergrandParentDiv.classList.add('ons-panel', 'ons-panel--error', 'ons-panel--no-title');

            // Update the display style of the p element within the parent div
            var AftererrorP = AfterparentDiv.querySelector('p');
            if (AftererrorP) {
                AftererrorP.style.display = 'block';

                // Update the text content of the <strong> tag within the p element
                var AfterstrongTag = AftererrorP.querySelector('strong');
                if (AfterstrongTag) {
                    AfterstrongTag.textContent = 'Enter a valid date';
                }
            }

            var errorPanel = document.getElementById("date-error-panel");
            errorPanel.style.display = "block";
            var firstListItem = document.querySelector("#date-error-panel li a");
            if(errorsForDateBefore == true){
                var secondChildLi = document.querySelector('#date-error-panel li:nth-child(2)');
                var secondLink = secondChildLi.querySelector('a');
                secondLink.textContent = 'Enter a valid date';
            }
            else{
                errorPanel.style.display = "block";
                var firstListItem = document.querySelector("#date-error-panel li a");
                firstListItem.textContent = 'Enter a valid date';

            

                // Invalid day or month, update error message and add error classes
                if (parseInt(AfterDayFilter) < 1 || parseInt(AfterDayFilter) > 31) {
                    document.getElementById("created-after-filter-day").classList.add('ons-input--error');
                } else {
                    document.getElementById("created-after-filter-day").classList.remove('ons-input--error');
                }
                if (parseInt(AfterMonthFilter) < 1 || parseInt(AfterMonthFilter) > 12) {
                    document.getElementById("created-after-filter-month").classList.add('ons-input--error');
                } else {
                    document.getElementById("created-after-filter-month").classList.remove('ons-input--error');
                }
                document.getElementById("created-after-filter-year").classList.remove('ons-input--error');
                
                var errorPanel = document.getElementById("date-error-panel");
                errorPanel.style.display = "block";
                var firstListItem = document.querySelector("#date-error-panel li a");
                firstListItem.textContent = 'Enter a valid date';

                errorsForDateAfter = true; 

            }
        }
        else{

            console.log('else');
            var fieldset = document.getElementById("created-after-filter");
            var parentDiv = fieldset.closest(".ons-panel--error"); // Find the parent div with class ons-panel--error
            var panelBodyDiv = fieldset.closest(".ons-panel__body");

            if (parentDiv) {
                // Add classes to the found parent div
                parentDiv.classList.remove('ons-panel', 'ons-panel--error', 'ons-panel--no-title');
                panelBodyDiv.classList.remove('ons-panel__body');

                // Update the display style of the p element within the parent div
                var errorP = parentDiv.querySelector('p');
                if (errorP) {
                    errorP.style.display = 'none';
                }

                document.getElementById('created-after-filter-day').classList.remove('ons-input--error');
                document.getElementById('created-after-filter-month').classList.remove('ons-input--error')
                document.getElementById('created-after-filter-year').classList.remove('ons-input--error')

            }
        }
    
    }

    if(errorsForDateBefore == true || errorsForDateAfter == true){
        if(errorsForDateBefore == true && errorsForDateAfter == true){
            var secondLiElement = document.querySelectorAll('.ons-list__item')[1];
            secondLiElement.style.display = "list-item";
            var ErrorPanelHeading = document.getElementById('alert');
            ErrorPanelHeading.textContent = 'There are 2 problems with this page';
        }
        else{
            console.log('only one error');
            var secondLiElement = document.querySelectorAll('.ons-list__item')[1];
            secondLiElement.style.display = "none";
        }
        var ErrorPanel = document.getElementById('date-error-panel');
        ErrorPanel.classList.remove('ons-u-d-no');
        ErrorPanel.classList.add('ons-u-mb-xl');
        return;
    }
    else{
        var ErrorPanel = document.getElementById('date-error-panel');
        ErrorPanel.classList.add('ons-u-d-no');
        ErrorPanel.classList.remove('ons-u-mb-xl');
    }

    BeforeDayFilter = BeforeDayFilter.replace(/^0+/, "");
    BeforeMonthFilter = BeforeMonthFilter.replace(/^0+/, "");
    AfterDayFilter = AfterDayFilter.replace(/^0+/, "");
    AfterMonthFilter = AfterMonthFilter.replace(/^0+/, "");

    const tagsProject = document.getElementById("tags-project");
    const tagsOwner = document.getElementById("tags-owner");
    const tagsDateBefore = document.getElementById("tags-dateBefore");
    const tagsDateAfter = document.getElementById("tags-dateAfter");
    const tagsAccess = document.getElementById("tags-access");

    while (tagsProject.firstChild) {
        tagsProject.removeChild(tagsProject.firstChild);
        tagsProject.classList.remove('FiltersFlexItems');
    }
    while (tagsOwner.firstChild) {
        tagsOwner.removeChild(tagsOwner.firstChild);
        tagsOwner.classList.remove('FiltersFlexItems');
    }
    while (tagsDateBefore.firstChild) {
        tagsDateBefore.removeChild(tagsDateBefore.firstChild);
        tagsDateBefore.classList.remove('FiltersFlexItems');
    }
    while (tagsDateAfter.firstChild) {
        tagsDateAfter.removeChild(tagsDateAfter.firstChild);
        tagsDateAfter.classList.remove('FiltersFlexItems');
    }
    while (tagsAccess.firstChild) {
        tagsAccess.removeChild(tagsAccess.firstChild);
        tagsAccess.classList.remove('FiltersFlexItems');
    }
    
    // Remove 'filtered-out' class from all rows in starred-table
    let starredRows = document.querySelectorAll('#starred-table .ons-table__row');
    starredRows.forEach(function (row) {
        row.classList.remove('filtered-out');
    });

    // Remove 'filtered-out' class from all rows in basic-table
    let basicRows = document.querySelectorAll('#basic-table .ons-table__row');
    basicRows.forEach(function (row) {
        row.classList.remove('filtered-out');
    });
    document.getElementById('area-for-tags').classList.remove('AllFiltersFlexContainer'); 
    document.getElementById('tagsAndBtnContainer').classList.remove('tagAndClearFiltersContainer');
    document.getElementById('clearFiltersBtn').style.display = 'none';  

    function filterTable(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.querySelectorAll("tbody tr");

        for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var TitleShortcodeCell = row.getElementsByTagName("td")[0];
        var ProjectCell = row.getElementsByTagName("td")[1];
        var OwnerCell = row.getElementsByTagName("td")[2];
        var AccessCell = row.getElementsByTagName("td")[4];


        var ProjectCellText = ProjectCell.textContent.toLowerCase();
        var OwnerCellText = OwnerCell.textContent.toLowerCase();
        var cell = row.querySelector("td[data-date-value]");

        var searchFilter = true;
        var cellText = TitleShortcodeCell.textContent.toLowerCase(); 
        // Assuming you want to search the first column
        if(searchField != ""){
            if (!cellText.includes(searchField)) {
                searchFilter = false;
            }
        }

        // Check if the Project filter is non-empty and matches
        var projectFilterMatch = projectFilter === "" || ProjectCellText.includes(projectFilter);

        // Check if the Owner filter is non-empty and matches
        var ownerFilterMatch = ownerFilter === "" || OwnerCellText.includes(ownerFilter);

        // Check if the Before filters are non-empty and match
        var BeforedateFilterMatch = true;
        if (BeforeDayFilter !== "" && BeforeMonthFilter !== "" && BeforeYearFilter !== "") {
            if (cell) {
            var cellDate = cell.getAttribute("data-date-value");
            var BeforefilterDate = new Date(BeforeYearFilter, BeforeMonthFilter - 1, BeforeDayFilter);
            var cellDateObj = new Date(cellDate);
            BeforedateFilterMatch = cellDateObj < BeforefilterDate;
            }
            }

        // Check if the After filters are non-empty and match
        var AfterdateFilterMatch = true;
        if (AfterDayFilter !== "" && AfterMonthFilter !== "" && AfterYearFilter !== "") {
            if (cell) {
            var cellDateAfter = cell.getAttribute("data-date-value");
            var AfterfilterDate = new Date(AfterYearFilter, AfterMonthFilter - 1, AfterDayFilter);
            var cellDateObjAfter = new Date(cellDateAfter);
            AfterdateFilterMatch = cellDateObjAfter > AfterfilterDate;
            console.log(AfterdateFilterMatch);
            }
        }

        // Check if the access matches
        var accessCellValue = AccessCell.textContent.trim();
        //console.log(accessCellValue);
        var access = true;
        if (EditorAccess.checked || ViewOnlyAccess.checked || ReadOnlyAccess.checked) {
            // Check if any of the checked checkboxes' values match the AccessCell content
            if ((EditorAccess.checked && EditorAccess.value === accessCellValue) ||
                (ViewOnlyAccess.checked && ViewOnlyAccess.value === accessCellValue) ||
                (ReadOnlyAccess.checked && ReadOnlyAccess.value === accessCellValue)) {
            access = true; // Set access to true if there's a match
            }
            else{
                access = false;
    
            }
        }
        else{
            document.getElementById("tags-access").style.display = "none"; 
        }

        if (!projectFilterMatch || !ownerFilterMatch || !BeforedateFilterMatch || !AfterdateFilterMatch || !access || !searchFilter) {
            row.classList.add("filtered-out");
            row.style.display = "none";
        }
    }}

    // Check if the Project filter is non-empty and matches
    if (projectFilter !== "") {
        var projectFilterCapitals = document.getElementById("project-filter").value;
        appendFilterTag(projectFilterCapitals, "Project");
    }

    // Check if the Owner filter is non-empty and matches
    if (ownerFilter !== "") {
        var originalownerFilter = document.getElementById("owner-filter").value;
        console.log('Lauren here is the value: ' + originalownerFilter);
        appendFilterTag(originalownerFilter, "Owner");
    }

    // Check if the Before filters are non-empty and match
    if (BeforeDayFilter !== "" && BeforeMonthFilter !== "" && BeforeYearFilter !== "") {
        appendFilterTag(BeforeDayFilter + "/" + BeforeMonthFilter + "/" + BeforeYearFilter, "DateBefore");
    }

    // Check if the After filters are non-empty and match
    if (AfterDayFilter !== "" && AfterMonthFilter !== "" && AfterYearFilter !== "") {
        appendFilterTag(AfterDayFilter + "/" + AfterMonthFilter + "/" + AfterYearFilter, "DateAfter");
    }

    // Check if the access matches
    if (EditorAccess.checked || ViewOnlyAccess.checked || ReadOnlyAccess.checked) {
        if (EditorAccess.checked) {
        appendFilterTag("Editor", "Editor")
        }
        if (ViewOnlyAccess.checked) {
            appendFilterTag("View-only", "View-only");
            console.log('view-only added');

        }
        if (ReadOnlyAccess.checked) {
            appendFilterTag("Read-only for editors", "Read-only")
        }
    }

    filterTable("starred-table");
    filterTable("basic-table");

    // Update the total count of unfiltered rows
    var basicTableCount = countUnfilteredRows("basic-table");
    var starredTableCount = countUnfilteredRows("starred-table");
    var unfilteredRowsCount = basicTableCount + starredTableCount;
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    if(unfilteredRowsCount != 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaires';
    }
    if(unfilteredRowsCount == 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaire';
    }

    //Update the header
    var searchEntry = document.getElementById("search-field").value;
    var numberOfQuestionnairesElement = document.getElementById("SearchEntry");
    // Append the value of searchEntry to the existing text content
    if(searchField != ""){
        numberOfQuestionnairesElement.textContent = ' with ' + '"' + searchEntry + '"';
        document.getElementById('clearSearchBtn').style.display = "block";
    }
    if(searchField == ""){
        numberOfQuestionnairesElement.textContent = '';
        document.getElementById('clearSearchBtn').style.display = "none";
    }
    
    // Save filter values in session storage
    sessionStorage.setItem("searchField", searchFieldCapitals);
    sessionStorage.setItem("projectFilter", projectFilterCapitals);
    sessionStorage.setItem("ownerFilter", ownerFilterCapitals);
    sessionStorage.setItem("BeforeDayFilter", BeforeDayFilter);
    sessionStorage.setItem("BeforeMonthFilter", BeforeMonthFilter);
    sessionStorage.setItem("BeforeYearFilter", BeforeYearFilter);
    sessionStorage.setItem("AfterDayFilter", AfterDayFilter);
    sessionStorage.setItem("AfterMonthFilter", AfterMonthFilter);
    sessionStorage.setItem("AfterYearFilter", AfterYearFilter);

    if(document.getElementById('editor').checked === false){
        sessionStorage.setItem("Editor", '');
    }
    else{
        sessionStorage.setItem("Editor", true);
    }
    if(document.getElementById('view-only').checked === false){
        sessionStorage.setItem("ViewOnly", '');
    }
    else{
        sessionStorage.setItem("ViewOnly", true);
    }
    if(document.getElementById('read-only').checked === false){
        sessionStorage.setItem("ReadOnly", '');
    }
    else{
        sessionStorage.setItem("ReadOnly", true);
        console.log('setting to true');
    }
    

    updatePagination();
}


function ReApplySearchFilters() {
    currentPage = 1; // Reset currentPage to 1
    
    var starredTable = document.getElementById("starred-table");
    var basicTable = document.getElementById("basic-table");

    var searchFieldCapitals = sessionStorage.getItem('searchField');
    var searchField = sessionStorage.getItem('searchField');

    var projectFilter = sessionStorage.getItem('projectFilter').toLowerCase();

    var ownerFilter = sessionStorage.getItem('ownerFilter').toLowerCase();

    var BeforeDayFilter = sessionStorage.getItem('BeforeDayFilter');
    var BeforeMonthFilter = sessionStorage.getItem('BeforeMonthFilter');
    var BeforeYearFilter = sessionStorage.getItem('BeforeYearFilter');

    var AfterDayFilter = sessionStorage.getItem('AfterDayFilter');
    var AfterMonthFilter = sessionStorage.getItem('AfterMonthFilter');
    var AfterYearFilter = sessionStorage.getItem('AfterYearFilter');
    
    var EditorAccess = sessionStorage.getItem('Editor').toLowerCase();
    var ViewOnlyAccess = sessionStorage.getItem('ViewOnly').toLowerCase();
    var ReadOnlyAccess = sessionStorage.getItem('ReadOnly').toLowerCase();

    BeforeDayFilter = BeforeDayFilter.replace(/^0+/, "");
    BeforeMonthFilter = BeforeMonthFilter.replace(/^0+/, "");
    AfterDayFilter = AfterDayFilter.replace(/^0+/, "");
    AfterMonthFilter = AfterMonthFilter.replace(/^0+/, "");

    // Get all rows in both tables
    var starredRows = starredTable.querySelectorAll("tbody tr");
    var basicRows = basicTable.querySelectorAll("tbody tr");

    // Remove the filtered out classes so search can be restarted
    starredRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });

    basicRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });


    function RefilterTable(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.querySelectorAll("tbody tr");

        for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var TitleShortcodeCell = row.getElementsByTagName("td")[0];
        var ProjectCell = row.getElementsByTagName("td")[1];
        var OwnerCell = row.getElementsByTagName("td")[2];
        var AccessCell = row.getElementsByTagName("td")[4];


        var ProjectCellText = ProjectCell.textContent.toLowerCase();
        var OwnerCellText = OwnerCell.textContent.toLowerCase();
        var cell = row.querySelector("td[data-date-value]");

        var searchFilter = true;
        var cellText = TitleShortcodeCell.textContent.toLowerCase(); 
        // Assuming you want to search the first column
        if(searchField != ""){
            if (!cellText.includes(searchField)) {
                var searchFilter = false;
            }
        }

        // Check if the Project filter is non-empty and matches
        {#var projectFilterMatch = projectFilter === "" || ProjectCellText.includes(projectFilter);#}

        {#var projectFilterMatch = true;
        if(projectFilter != ""){
            if(ProjectCellText.includes(projectFilter)){
                projectFilterMatch = true;
            }
            else{
                projectFilterMatch = false;

            }
        }
        #}

        var projectFilterMatch = (projectFilter === "") || ProjectCellText.toLowerCase().includes(projectFilter);


        // Check if the Owner filter is non-empty and matches
        var ownerFilterMatch = (ownerFilter === "") || OwnerCellText.toLowerCase().includes(ownerFilter);

        {#var ownerFilterMatch = true;
        if(ownerFilter != ""){
            if(OwnerCellText.includes(ownerFilter)){
                ownerFilterMatch = true;
            }
            else{
                ownerFilterMatch = false;
            }
        }
        #}

        // Check if the Before filters are non-empty and match
        var BeforedateFilterMatch = true;
        if (BeforeDayFilter !== "" && BeforeMonthFilter !== "" && BeforeYearFilter !== "") {
            if (cell) {
            var cellDate = cell.getAttribute("data-date-value");
            var BeforefilterDate = new Date(BeforeYearFilter, BeforeMonthFilter - 1, BeforeDayFilter);
            var cellDateObj = new Date(cellDate);
            BeforedateFilterMatch = cellDateObj < BeforefilterDate;
            }
        }

        // Check if the After filters are non-empty and match
        var AfterdateFilterMatch = true;
        if (AfterDayFilter !== "" && AfterMonthFilter !== "" && AfterYearFilter !== "") {
            if (cell) {
            var cellDateAfter = cell.getAttribute("data-date-value");
            var AfterfilterDate = new Date(AfterYearFilter, AfterMonthFilter - 1, AfterDayFilter);
            var cellDateObjAfter = new Date(cellDateAfter);
            AfterdateFilterMatch = cellDateObjAfter > AfterfilterDate;
            console.log(AfterdateFilterMatch);
            }
        }

        // Check if the access matches
        var accessCellValue = AccessCell.textContent.toLowerCase().trim();
        console.log(accessCellValue);
        var access = true;
        if (EditorAccess != "" || ViewOnlyAccess != "" || ReadOnlyAccess != "") {
            // Check if any of the checked checkboxes' values match the AccessCell content
            if ((EditorAccess === 'true' && accessCellValue == 'editor') ||
                (ViewOnlyAccess  === 'true' && accessCellValue == 'view-only') ||
                (ReadOnlyAccess  === 'true' && accessCellValue == 'read-only for editors')) {
            access = true; // Set access to true if there's a match
            console.log('access is true');
            }
            else{
                access = false;
                console.log('access is not true');
            }
        }
        else{
            document.getElementById("tags-access").style.display = "none"; 
        }

        if (!projectFilterMatch || !ownerFilterMatch || !BeforedateFilterMatch || !AfterdateFilterMatch || !access || !searchFilter) {
            row.classList.add("filtered-out");
            row.style.display = "none";
            console.log('removing');
            console.log(projectFilterMatch);
            console.log(ownerFilterMatch);

        }
        else{
            row.style.display = "table-row";
        }
    }}

    RefilterTable("starred-table");
    RefilterTable("basic-table");

    // Update the total count of unfiltered rows
    var basicTableCount = countUnfilteredRows("basic-table");
    var starredTableCount = countUnfilteredRows("starred-table");
    var unfilteredRowsCount = basicTableCount + starredTableCount;
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    if(unfilteredRowsCount != 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaires';
    }
    if(unfilteredRowsCount == 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaire';
    }

    //Update the header
    var searchEntry = document.getElementById("search-field").value;
    var numberOfQuestionnairesElement = document.getElementById("SearchEntry");
    // Append the value of searchEntry to the existing text content
    if(searchField != ""){
        numberOfQuestionnairesElement.textContent = ' with ' + '"' + searchEntry + '"';
        document.getElementById('clearSearchBtn').style.display = "block";
    }
    if(searchField == ""){
        numberOfQuestionnairesElement.textContent = '';
        document.getElementById('clearSearchBtn').style.display = "none";
    }
    
    // Save filter values in session storage
    sessionStorage.setItem("searchField", searchField);
    sessionStorage.setItem("projectFilter", projectFilter);
    sessionStorage.setItem("ownerFilter", ownerFilter);
    sessionStorage.setItem("BeforeDayFilter", BeforeDayFilter);
    sessionStorage.setItem("BeforeMonthFilter", BeforeMonthFilter);
    sessionStorage.setItem("BeforeYearFilter", BeforeYearFilter);
    sessionStorage.setItem("AfterDayFilter", AfterDayFilter);
    sessionStorage.setItem("AfterMonthFilter", AfterMonthFilter);
    sessionStorage.setItem("AfterYearFilter", AfterYearFilter);

    if(document.getElementById('editor').checked === false){
        sessionStorage.setItem("Editor", '');
    }
    else{
        sessionStorage.setItem("Editor", true);
    }
    if(document.getElementById('view-only').checked === false){
        sessionStorage.setItem("ViewOnly", '');
    }
    else{
        sessionStorage.setItem("ViewOnly", true);
    }
    if(document.getElementById('read-only').checked === false){
        sessionStorage.setItem("ReadOnly", '');
    }
    else{
        sessionStorage.setItem("ReadOnly", true);
        console.log('setting to true');
    }
    

    updatePagination();
}

function ReApplySearch() {
    currentPage = 1; // Reset currentPage to 1
    
    var starredTable = document.getElementById("starred-table");
    var basicTable = document.getElementById("basic-table");

    var searchFieldCapitals = sessionStorage.getItem('searchField');
    var searchField = sessionStorage.getItem('searchField');

    // Get all rows in both tables
    var starredRows = starredTable.querySelectorAll("tbody tr");
    var basicRows = basicTable.querySelectorAll("tbody tr");

    // Remove the filtered out classes so search can be restarted
    starredRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });

    basicRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });


    function RefilterTable(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.querySelectorAll("tbody tr");

        for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var TitleShortcodeCell = row.getElementsByTagName("td")[0];
        var cell = row.querySelector("td[data-date-value]");

        var searchFilter = true;
        var cellText = TitleShortcodeCell.textContent.toLowerCase(); 
        // Assuming you want to search the first column
        if(searchField != ""){
            if (!cellText.includes(searchField)) {
                var searchFilter = false;
            }
        }

        if (!searchFilter) {
            row.classList.add("filtered-out");
            row.style.display = "none";
        }
        else{
            row.style.display = "table-row";
        }
    }}

    RefilterTable("starred-table");
    RefilterTable("basic-table");

    // Update the total count of unfiltered rows
    var basicTableCount = countUnfilteredRows("basic-table");
    var starredTableCount = countUnfilteredRows("starred-table");
    var unfilteredRowsCount = basicTableCount + starredTableCount;
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    if(unfilteredRowsCount != 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaires';
    }
    if(unfilteredRowsCount == 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaire';
    }

    //Update the header
    var searchEntry = document.getElementById("search-field").value;
    var numberOfQuestionnairesElement = document.getElementById("SearchEntry");
    // Append the value of searchEntry to the existing text content
    if(searchField != ""){
        numberOfQuestionnairesElement.textContent = ' with ' + '"' + searchEntry + '"';
        document.getElementById('clearSearchBtn').style.display = "block";
    }
    if(searchField == ""){
        numberOfQuestionnairesElement.textContent = '';
        document.getElementById('clearSearchBtn').style.display = "none";
    }

    updatePagination();
}

function ClearSearchReApplyFilters() {
    currentPage = 1; // Reset currentPage to 1

    document.getElementById("search-field").value = "";
    document.getElementById("clearSearchBtn").style.display = "none";
    
    var starredTable = document.getElementById("starred-table");
    var basicTable = document.getElementById("basic-table");

    var projectFilter = sessionStorage.getItem('projectFilter').toLowerCase();

    var ownerFilter = sessionStorage.getItem('ownerFilter').toLowerCase();

    var BeforeDayFilter = sessionStorage.getItem('BeforeDayFilter');
    var BeforeMonthFilter = sessionStorage.getItem('BeforeMonthFilter');
    var BeforeYearFilter = sessionStorage.getItem('BeforeYearFilter');

    var AfterDayFilter = sessionStorage.getItem('AfterDayFilter');
    var AfterMonthFilter = sessionStorage.getItem('AfterMonthFilter');
    var AfterYearFilter = sessionStorage.getItem('AfterYearFilter');
    
    var EditorAccess = sessionStorage.getItem('Editor');

    var ViewOnlyAccess = sessionStorage.getItem('ViewOnly');
    var ReadOnlyAccess = sessionStorage.getItem('ReadOnly');

    BeforeDayFilter = BeforeDayFilter.replace(/^0+/, "");
    BeforeMonthFilter = BeforeMonthFilter.replace(/^0+/, "");
    AfterDayFilter = AfterDayFilter.replace(/^0+/, "");
    AfterMonthFilter = AfterMonthFilter.replace(/^0+/, "");

    // Get all rows in both tables
    var starredRows = starredTable.querySelectorAll("tbody tr");
    var basicRows = basicTable.querySelectorAll("tbody tr");

    // Remove the filtered out classes so search can be restarted
    starredRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });

    basicRows.forEach(function (row) {
    row.classList.remove("filtered-out");
    });


    function RefilterTable(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.querySelectorAll("tbody tr");

        for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var ProjectCell = row.getElementsByTagName("td")[1];
        var OwnerCell = row.getElementsByTagName("td")[2];
        var AccessCell = row.getElementsByTagName("td")[4];


        var ProjectCellText = ProjectCell.textContent.toLowerCase();
        var OwnerCellText = OwnerCell.textContent.toLowerCase();
        var cell = row.querySelector("td[data-date-value]");

        // Check if the Project filter is non-empty and matches
        {#var projectFilterMatch = projectFilter === "" || ProjectCellText.includes(projectFilter);#}

        {#var projectFilterMatch = true;
        if(projectFilter != ""){
            if(ProjectCellText.includes(projectFilter)){
                projectFilterMatch = true;
            }
            else{
                projectFilterMatch = false;

            }
        }
        #}

        var projectFilterMatch = (projectFilter === "") || ProjectCellText.toLowerCase().includes(projectFilter);


        // Check if the Owner filter is non-empty and matches
        var ownerFilterMatch = (ownerFilter === "") || OwnerCellText.toLowerCase().includes(ownerFilter);

        {#var ownerFilterMatch = true;
        if(ownerFilter != ""){
            if(OwnerCellText.includes(ownerFilter)){
                ownerFilterMatch = true;
            }
            else{
                ownerFilterMatch = false;
            }
        }
        #}

        // Check if the Before filters are non-empty and match
        var BeforedateFilterMatch = true;
        if (BeforeDayFilter !== "" && BeforeMonthFilter !== "" && BeforeYearFilter !== "") {
            if (cell) {
            var cellDate = cell.getAttribute("data-date-value");
            var BeforefilterDate = new Date(BeforeYearFilter, BeforeMonthFilter - 1, BeforeDayFilter);
            var cellDateObj = new Date(cellDate);
            BeforedateFilterMatch = cellDateObj < BeforefilterDate;
            }
        }

        // Check if the After filters are non-empty and match
        var AfterdateFilterMatch = true;
        if (AfterDayFilter !== "" && AfterMonthFilter !== "" && AfterYearFilter !== "") {
            if (cell) {
            var cellDateAfter = cell.getAttribute("data-date-value");
            var AfterfilterDate = new Date(AfterYearFilter, AfterMonthFilter - 1, AfterDayFilter);
            var cellDateObjAfter = new Date(cellDateAfter);
            AfterdateFilterMatch = cellDateObjAfter > AfterfilterDate;
            console.log(AfterdateFilterMatch);
            }
        }

        // Check if the access matches
        var accessCellValue = AccessCell.textContent.toLowerCase().trim();
        console.log(accessCellValue);
        var access = true;
        if (EditorAccess != "" || ViewOnlyAccess != "" || ReadOnlyAccess != "") {
            // Check if any of the checked checkboxes' values match the AccessCell content
            if ((EditorAccess === 'true' && accessCellValue == 'editor') ||
                (ViewOnlyAccess  === 'true' && accessCellValue == 'view-only') ||
                (ReadOnlyAccess  === 'true' && accessCellValue == 'read-only for editors')) {
            access = true; // Set access to true if there's a match
            console.log('access is true');
            }
            else{
                access = false;
                console.log('access is not true');
            }
        }
        else{
            document.getElementById("tags-access").style.display = "none"; 
        }

        if (!projectFilterMatch || !ownerFilterMatch || !BeforedateFilterMatch || !AfterdateFilterMatch || !access) {
            row.classList.add("filtered-out");
            row.style.display = "none";
            console.log('removing');
            console.log(projectFilterMatch);
            console.log(ownerFilterMatch);

        }
        else{
            row.style.display = "table-row";
        }
    }}

    RefilterTable("starred-table");
    RefilterTable("basic-table");

    // Update the total count of unfiltered rows
    var basicTableCount = countUnfilteredRows("basic-table");
    var starredTableCount = countUnfilteredRows("starred-table");
    var unfilteredRowsCount = basicTableCount + starredTableCount;
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    if(unfilteredRowsCount != 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaires';
    }
    if(unfilteredRowsCount == 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaire';
    }

    //Update the header
    var searchEntry = document.getElementById("search-field").value;
    var numberOfQuestionnairesElement = document.getElementById("SearchEntry");
    numberOfQuestionnairesElement.textContent = '';
    
    // Save filter values in session storage
    sessionStorage.setItem("searchField", "");
    

    updatePagination();
}


// Function to clear input values
function clearInputValues() {

    const tagsProject = document.getElementById("tags-project");
    const tagsOwner = document.getElementById("tags-owner");
    const tagsDateBefore = document.getElementById("tags-dateBefore");
    const tagsDateAfter = document.getElementById("tags-dateAfter");
    const tagsAccess = document.getElementById("tags-access");

    while (tagsProject.firstChild) {
        tagsProject.removeChild(tagsProject.firstChild);
        tagsProject.classList.remove('FiltersFlexItems');
    }
    while (tagsOwner.firstChild) {
        tagsOwner.removeChild(tagsOwner.firstChild);
        tagsOwner.classList.remove('FiltersFlexItems');
    }
    while (tagsDateBefore.firstChild) {
        tagsDateBefore.removeChild(tagsDateBefore.firstChild);
        tagsDateBefore.classList.remove('FiltersFlexItems');
    }
    while (tagsDateAfter.firstChild) {
        tagsDateAfter.removeChild(tagsDateAfter.firstChild);
        tagsDateAfter.classList.remove('FiltersFlexItems');
    }
    while (tagsAccess.firstChild) {
        tagsAccess.removeChild(tagsAccess.firstChild);
        tagsAccess.classList.remove('FiltersFlexItems');
    }

    document.getElementById("project-filter").value = "";
    document.getElementById("owner-filter").value = "";
    document.getElementById("created-before-filter-day").value = "";
    document.getElementById("created-before-filter-month").value = "";
    document.getElementById("created-before-filter-year").value = "";
    document.getElementById("created-after-filter-day").value = "";
    document.getElementById("created-after-filter-month").value = "";
    document.getElementById("created-after-filter-year").value = "";
    document.getElementById("editor").checked = false;
    document.getElementById("view-only").checked = false;
    document.getElementById("read-only").checked = false;
    
    // Remove 'filtered-out' class from all rows in starred-table
    let starredRows = document.querySelectorAll('#starred-table .ons-table__row');
    starredRows.forEach(function (row) {
        row.classList.remove('filtered-out');
    });

    // Remove 'filtered-out' class from all rows in basic-table
    let basicRows = document.querySelectorAll('#basic-table .ons-table__row');
    basicRows.forEach(function (row) {
        row.classList.remove('filtered-out');
    });
    document.getElementById('area-for-tags').classList.remove('AllFiltersFlexContainer'); 
    document.getElementById('tagsAndBtnContainer').classList.remove('tagAndClearFiltersContainer');
    document.getElementById('clearFiltersBtn').style.display = 'none';    

    // Update filter values in session storage
    sessionStorage.setItem("projectFilter", '');
    sessionStorage.setItem("ownerFilter", '');
    sessionStorage.setItem("BeforeDayFilter", '');
    sessionStorage.setItem("BeforeMonthFilter", '');
    sessionStorage.setItem("BeforeYearFilter", '');
    sessionStorage.setItem("AfterDayFilter", '');
    sessionStorage.setItem("AfterMonthFilter", '');
    sessionStorage.setItem("AfterYearFilter", '');
    sessionStorage.setItem("Editor", '');
    sessionStorage.setItem("ViewOnly", '');
    sessionStorage.setItem("ReadOnly", '');

    ReApplySearch();
}

function appendFilterTag(filterText, filterType) {
    // Remove whitespaces from filterText and use it as the element id
    var filterId = filterText.replace(/\s/g, "");

    // Check if an element with the id already exists
    if (!document.getElementById(filterId)) {
        // Create a new button element for the filter tag
        var button = document.createElement("button");
        button.className = "filter-tag-button"; // You can style this class in your CSS
        button.textContent = filterText;

        // Create a span element for the close icon
        var closeIcon = document.createElement("span");
        closeIcon.className = "material-symbols-outlined";
        closeIcon.textContent = "close";

        // Append the close icon to the button
        button.appendChild(closeIcon);

        // Set the onclick attribute to remove the filter
        button.setAttribute("onclick", "removeFilterTag('" + filterId + "', '" + filterType + "')");
        
        // Set the id of the element to the filterId
        button.id = filterId;

        // Append the button to the filter tag area

        if (filterType === "Project") {
            var filterTagArea = document.getElementById("tags-project");
            filterTagArea.textContent = "Project: ";
            filterTagArea.appendChild(button);
            document.getElementById("tags-project").style.display = "flex";
            document.getElementById('tags-project').classList.add('FiltersFlexItems');
            document.getElementById('area-for-tags').classList.add('AllFiltersFlexContainer');
            document.getElementById('tagsAndBtnContainer').classList.add('tagAndClearFiltersContainer');
            document.getElementById('clearFiltersBtn').style.display = 'block'; 

        } 
        if (filterType === "Owner") {
            var filterTagArea = document.getElementById("tags-owner");
            filterTagArea.textContent = "Owner: ";
            filterTagArea.appendChild(button); 
            document.getElementById("tags-owner").style.display = "flex";
            document.getElementById('tags-owner').classList.add('FiltersFlexItems');
            document.getElementById('area-for-tags').classList.add('AllFiltersFlexContainer'); 
            document.getElementById('tagsAndBtnContainer').classList.add('tagAndClearFiltersContainer');
            document.getElementById('clearFiltersBtn').style.display = 'block'; 
      
        } 
        if (filterType === "DateBefore") {
            var filterTagArea = document.getElementById("tags-dateBefore");
            filterTagArea.textContent = "Created before: ";
            filterTagArea.appendChild(button);
            document.getElementById("tags-dateBefore").style.display = "flex";
            document.getElementById('tags-dateBefore').classList.add('FiltersFlexItems');
            document.getElementById('area-for-tags').classList.add('AllFiltersFlexContainer'); 
            document.getElementById('tagsAndBtnContainer').classList.add('tagAndClearFiltersContainer');
            document.getElementById('clearFiltersBtn').style.display = 'block'; 
   
        }
        if (filterType === "DateAfter") {
            var filterTagArea = document.getElementById("tags-dateAfter");
            filterTagArea.textContent = "Created after: ";
            filterTagArea.appendChild(button);
            document.getElementById("tags-dateAfter").style.display = "flex";
            document.getElementById('tags-dateAfter').classList.add('FiltersFlexItems');
            document.getElementById('area-for-tags').classList.add('AllFiltersFlexContainer');
            document.getElementById('tagsAndBtnContainer').classList.add('tagAndClearFiltersContainer');
            document.getElementById('clearFiltersBtn').style.display = 'block'; 
    
        }
        if ((filterType === "Editor") || (filterType === "View-only") || (filterType === "Read-only")) {
            var filterTagArea = document.getElementById("tags-access");
            filterTagArea.textContent = "Access: ";
            filterTagArea.appendChild(button);    
            document.getElementById("tags-access").style.display = "flex";
            document.getElementById('tags-access').classList.add('FiltersFlexItems');
            document.getElementById('area-for-tags').classList.add('AllFiltersFlexContainer'); 
            document.getElementById('tagsAndBtnContainer').classList.add('tagAndClearFiltersContainer');
            document.getElementById('clearFiltersBtn').style.display = 'block'; 

        }


    }
}


// Function to remove a filter tag and reapply filters
function removeFilterTag(tagId, filterType) {
    // Clear the corresponding input value
    if (filterType === "Project") {
        sessionStorage.setItem("projectFilter", "");
        document.getElementById("project-filter").value = "";
        document.getElementById("tags-project").style.display = "none";    
    } 
    if (filterType === "Owner") {
        console.log('clearing owner filter');
        sessionStorage.setItem("ownerFilter", "");
        document.getElementById("owner-filter").value = "";
        document.getElementById("tags-owner").style.display = "none";

    } 
    if (filterType === "DateBefore") {
        sessionStorage.setItem("BeforeDayFilter", "");
        sessionStorage.setItem("BeforeMonthFilter", "");
        sessionStorage.setItem("BeforeYearFilter", "");
        document.getElementById("created-before-filter-day").value = "";
        document.getElementById("created-before-filter-month").value = "";
        document.getElementById("created-before-filter-year").value = "";
        document.getElementById("tags-dateBefore").style.display = "none"; 
    } 
    if (filterType === "DateAfter") {
        sessionStorage.setItem("AfterDayFilter", "");
        sessionStorage.setItem("AfterMonthFilter", "");
        sessionStorage.setItem("AfterYearFilter", "");
        document.getElementById("created-after-filter-day").value = "";
        document.getElementById("created-after-filter-month").value = "";
        document.getElementById("created-after-filter-year").value = "";
        document.getElementById("tags-dateAfter").style.display = "none"; 
    } 
    if (filterType == "Editor") {
        document.getElementById("editor").checked = false;
        sessionStorage.setItem("Editor", '');
        console.log('removing editor');
        document.getElementById("tags-access").style.display = "none"; 

    }
    if (filterType == "View-only") {
        document.getElementById("view-only").checked = false;
        sessionStorage.setItem("ViewOnly", '');
        document.getElementById("tags-access").style.display = "none"; 

    }
    if (filterType == "Read-only") {
        document.getElementById("read-only").checked = false;
        sessionStorage.setItem("ReadOnly", '');
        document.getElementById("tags-access").style.display = "none"; 
    }

    console.log('tag ID is: ', tagId);
    document.getElementById(tagId).remove();

    if (document.getElementById("tags-access").childElementCount === 0) {
        document.getElementById("tags-access").style.display = "none";

    }

    var parentElement = document.getElementById("area-for-tags");
    var childElements = parentElement.children;
    var hiddenChildrenCount = 0;

    for (var i = 0; i < childElements.length; i++) {
        var computedStyle = getComputedStyle(childElements[i]);
        if (computedStyle.display === "none") {
            hiddenChildrenCount++;
        }
    }

    console.log(hiddenChildrenCount);

    if (hiddenChildrenCount == 5) {
        parentElement.classList.remove("AllFiltersFlexContainer");
        document.getElementById('tagsAndBtnContainer').classList.remove('tagAndClearFiltersContainer');
        document.getElementById('clearFiltersBtn').style.display = 'none'; 
    }


    // Reapply all search and filters
    ReApplySearchFilters(); 
}


    var currentPage = 1;
    var TotalPages; // Declare TotalPages as a global variable

function updatePagination() {
    var starredTable = document.getElementById("starred-table");
    var basicTable = document.getElementById("basic-table");
    var nextButton = document.getElementById("next");
    var previousButton = document.getElementById("previous");
    var nextPaginationLabel = nextButton.querySelector("span.ons-content-pagination__link-label");
    var previousPaginationLabel = previousButton.querySelector("span.ons-content-pagination__link-label");

    document.getElementById('noSearchResultsMessage').style.display = 'none';

    // Get the <tbody> elements for both tables
    var starredTBody = starredTable.querySelector("tbody");
    var basicTBody = basicTable.querySelector("tbody");

    // Get all rows in both tables
    var starredRows = starredTBody.querySelectorAll("tr");
    var basicRows = basicTBody.querySelectorAll("tr");

    // Filter rows and add them to respective arrays
    var filteredStarredRows = Array.from(starredRows).filter(function (row) {
        return !row.classList.contains("filtered-out");
    });

    var filteredBasicRows = Array.from(basicRows).filter(function (row) {
        return !row.classList.contains("filtered-out");
    });

    // Calculate the total number of rows and pages
    var totalRows = filteredStarredRows.length + filteredBasicRows.length;
    var rowsPerPage = 20;
    TotalPages = Math.ceil(totalRows / rowsPerPage); // Update the global TotalPages variable

    // Calculate the current page's rows
    var startIndex = (currentPage - 1) * rowsPerPage;
    var endIndex = startIndex + rowsPerPage;

    // Display rows on the current page
    for (var i = 0; i < filteredStarredRows.length; i++) {
        if (i >= startIndex && i < endIndex) {
        filteredStarredRows[i].style.display = "table-row";
        } else {
        filteredStarredRows[i].style.display = "none";
        }
    }

    for (var j = 0; j < filteredBasicRows.length; j++) {
        if (i + j >= startIndex && i + j < endIndex) {
        filteredBasicRows[j].style.display = "table-row";
        } else {
        filteredBasicRows[j].style.display = "none";
        }
    }

    // Update the pagination labels for "Next" and "Previous" links
    if (currentPage < TotalPages) {
        nextPaginationLabel.textContent = currentPage + 1 + " of " + TotalPages;
    } else {
        nextPaginationLabel.textContent = "Next";
    }

    if (currentPage > 1) {
        previousPaginationLabel.textContent = currentPage - 1 + " of " + TotalPages;
    } else {
        previousPaginationLabel.textContent = "Previous";
    }

    // Show/hide the "Next" and "Previous" links based on the current page
    nextButton.style.display = currentPage < TotalPages ? "block" : "none";
    previousButton.style.display = currentPage > 1 ? "block" : "none";

    // Hide the tables if no rows are displayed
    starredTable.style.display = filteredStarredRows.some(row => row.style.display === "table-row") ? "table" : "none";
    basicTable.style.display = filteredBasicRows.some(row => row.style.display === "table-row") ? "table" : "none";

    //Hide the starred message if necessary
    var starred = document.getElementById('starred-table');
    var noOfRows = starred.querySelectorAll("tbody tr");
    var noOfStarredRows = 0;

    for (var i = 0; i < noOfRows.length; i++) {
        var Row = noOfRows[i];
        if (!Row.classList.contains("filtered-out")) {
            noOfStarredRows++;
        }
    }
    console.log('Number of starred rows: ' + noOfStarredRows);

    if (
    noOfStarredRows == 0 &&
    (
        (sessionStorage.getItem('searchField') === null) &&
        (sessionStorage.getItem('projectFilter') === null) &&
        (sessionStorage.getItem('ownerFilter') === null) &&
        (sessionStorage.getItem('BeforeDayFilter') === null) &&
        (sessionStorage.getItem('AfterDayFilter') === null) &&
        (sessionStorage.getItem('Editor') === null) &&
        (sessionStorage.getItem('ViewOnly') === null) &&
        (sessionStorage.getItem('ReadOnly') === null)
    )
    ) {        
            console.log('there are no starred and no filters have been applied yet');
            document.getElementById('StarredReplacement').style.display = 'block';
            document.getElementById('AddedToStarred').style.display = 'block';
        }
        if (
            noOfStarredRows == 0 &&
            (
                (sessionStorage.getItem('searchField') !== null && sessionStorage.getItem('searchField') !== '') ||
                (sessionStorage.getItem('projectFilter') !== null && sessionStorage.getItem('projectFilter') !== '') ||
                (sessionStorage.getItem('ownerFilter') !== null && sessionStorage.getItem('ownerFilter') !== '') ||
                (sessionStorage.getItem('BeforeDayFilter') !== null && sessionStorage.getItem('BeforeDayFilter') !== '') ||
                (sessionStorage.getItem('AfterDayFilter') !== null && sessionStorage.getItem('AfterDayFilter') !== '') ||
                (sessionStorage.getItem('Editor') !== null && sessionStorage.getItem('Editor') !== '') ||
                (sessionStorage.getItem('ViewOnly') !== null && sessionStorage.getItem('ViewOnly') !== '') ||
                (sessionStorage.getItem('ReadOnly') !== null && sessionStorage.getItem('ReadOnly') !== '')
            )
            ) {        
                console.log('there are no starred and a filter has been applied');
                document.getElementById('StarredReplacement').style.display = 'none';
                document.getElementById('AddedToStarred').style.display = 'none';
        }
        if(noOfStarredRows != 0){
            console.log('there are questionnaires in starred');
            document.getElementById('StarredReplacement').style.display = 'none';
            document.getElementById('AddedToStarred').style.display = 'none';
        }
        {#
        else{
            console.log('not sure');
            document.getElementById('StarredReplacement').style.display = 'block';
            document.getElementById('AddedToStarred').style.display = 'block';
        }
        #}
        if (
            noOfStarredRows == 0 &&
            (
                (sessionStorage.getItem('searchField') !== null && sessionStorage.getItem('searchField') === '') &&
                (sessionStorage.getItem('projectFilter') !== null && sessionStorage.getItem('projectFilter') === '') &&
                (sessionStorage.getItem('ownerFilter') !== null && sessionStorage.getItem('ownerFilter') === '') &&
                (sessionStorage.getItem('BeforeDayFilter') !== null && sessionStorage.getItem('BeforeDayFilter') === '') &&
                (sessionStorage.getItem('AfterDayFilter') !== null && sessionStorage.getItem('AfterDayFilter') === '') &&
                (sessionStorage.getItem('Editor') !== null && sessionStorage.getItem('Editor') === '') &&
                (sessionStorage.getItem('ViewOnly') !== null && sessionStorage.getItem('ViewOnly') === '') &&
                (sessionStorage.getItem('ReadOnly') !== null && sessionStorage.getItem('ReadOnly') === '')
            )
            ) {        
                console.log('there are no starred and filter have been cleared');
                document.getElementById('StarredReplacement').style.display = 'block';
                document.getElementById('AddedToStarred').style.display = 'block';
        }
        var basicTableCount = countUnfilteredRows("basic-table");
        var starredTableCount = countUnfilteredRows("starred-table");
        var unfilteredRowsCount = basicTableCount + starredTableCount;
        if(unfilteredRowsCount == 0){
            console.log('no results');
            document.getElementById('noSearchResultsMessage').style.display = 'block';
        }
}


    // Function to initialize the pagination
function initializePagination() {
    updatePagination(); // Call this function to initially set up the pagination
    var nextButton = document.getElementById("next");
    var previousButton = document.getElementById("previous");

    // Add an event listener to the "Next" link
    nextButton.addEventListener("click", function () {
        if (currentPage < TotalPages) {
        currentPage++;
            window.scrollTo({
                top: 0
            });
        updatePagination(); // Call updatePagination to update the page
        }
    });

    // Add an event listener to the "Previous" link
    previousButton.addEventListener("click", function () {
        if (currentPage > 1) {
        currentPage--;
            window.scrollTo({
                top: 0
            });
        updatePagination(); // Call updatePagination to update the page
        }
    });
}




function countUnfilteredRows(tableId) {
    var table = document.getElementById(tableId);
    var rows = table.querySelectorAll("tbody tr");
    var unfilteredRowCount = 0;

    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        if (!row.classList.contains("filtered-out")) {
            unfilteredRowCount++;
        }
    }

    return unfilteredRowCount;
}

function updateQuestionnaireCounter(){
    // Update the total count of unfiltered rows
    var basicTableCount = countUnfilteredRows("basic-table");
    var starredTableCount = countUnfilteredRows("starred-table");
    var unfilteredRowsCount = basicTableCount + starredTableCount;
    var numberOfQuestionnairesElement = document.querySelector('#NumberOfQuestionnaires span');
    if(unfilteredRowsCount != 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaires';
    }
    if(unfilteredRowsCount == 1){
        numberOfQuestionnairesElement.textContent = unfilteredRowsCount + ' questionnaire';
    }
}

function sortTables() {
  // Get the select element
  var select = document.getElementById('select-example');

  // Get the selected option value
  var selectedValue = select.value;

  if(selectedValue == ""){
    console.log('dont need to reorder');
    return;
  }

  // Sort the first table (basic-table)
  sortTable('basic-table', selectedValue);

  // Sort the second table (starred-table)
  sortTable('starred-table', selectedValue);
}

function sortTable(tableId, sortType) {
  // Get the table element by its ID
  var table = document.getElementById(tableId);

  // Get all the rows in the tbody
  var rows = Array.from(table.querySelector('tbody').querySelectorAll('tr'));

  // Sort the rows based on the data-date-value of the 4th td element
  rows.sort(function(a, b) {
    var dateA = new Date(a.querySelector('td:nth-child(4)').getAttribute('data-date-value'));
    var dateB = new Date(b.querySelector('td:nth-child(4)').getAttribute('data-date-value'));

    if (sortType === 'created-newest') {
      return dateB - dateA; // Sort in descending order (newest first)
    } else if (sortType === 'created-oldest') {
      return dateA - dateB; // Sort in ascending order (oldest first)
    }
  });

  // Clear the current table body
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';

  // Append the sorted rows back to the table
  for (var i = 0; i < rows.length; i++) {
    tbody.appendChild(rows[i]);
  }

    currentPage = 1; // Reset currentPage to 1
  updatePagination();
}


// Call the function to initialize the pagination
initializePagination();

sessionStorage.removeItem('projectFilter');
sessionStorage.removeItem('ownerFilter');
sessionStorage.removeItem('BeforeDayFilter');
sessionStorage.removeItem('BeforeMonthFilter');
sessionStorage.removeItem('BeforeYearFilter');
sessionStorage.removeItem('AfterDayFilter');
sessionStorage.removeItem('AfterMonthFilter');
sessionStorage.removeItem('AfterYearFilter');
sessionStorage.removeItem('Editor');
sessionStorage.removeItem('ViewOnly');
sessionStorage.removeItem('ReadOnly');
sessionStorage.removeItem('searchField');

</script>
{% endblock %}
